mymu = rnorm(4)
mymu = mymu/sqrt(sum(mymu^2))
myx  = RiemSphere::rvmf(100, mymu, kappa=1)
spmean1.lrt(myx, mymu, kappa0=NULL)
spmean1.lrt(myx, mymu, kappa0=1)
# example
mymu = rnorm(4)
mymu = mymu/sqrt(sum(mymu^2))
myx  = RiemSphere::rvmf(100, mymu, kappa=1)
spmean1.lrt(myx, mymu, kappa0=NULL)
spmean1.lrt(myx, mymu, kappa0=1)
library(RiemSphere)
# example
mymu = rnorm(4)
mymu = mymu/sqrt(sum(mymu^2))
myx  = RiemSphere::rvmf(100, mymu, kappa=1)
spmean1.lrt(myx, mymu, kappa0=NULL)
spmean1.lrt(myx, mymu, kappa0=1)
library(RiemSphere)
# example
mymu = rnorm(4)
mymu = mymu/sqrt(sum(mymu^2))
myx  = RiemSphere::rvmf(100, mymu, kappa=1)
spmean1.lrt(myx, mymu, kappa0=NULL)
spmean1.lrt(myx, mymu, kappa0=1)
library(RiemSphere)
# example
mymu = rnorm(4)
mymu = mymu/sqrt(sum(mymu^2))
myx  = RiemSphere::rvmf(100, mymu, kappa=1)
spmean1.lrt(myx, mymu, kappa0=NULL)
spmean1.lrt(myx, mymu, kappa0=1)
mle.vmf(myx)
library(RiemSphere)
mle.vmf(myx)
mle.vmf(myx, method='song')
mle.vmf(myx, method='sra')
mle.vmf(myx, method='tanabe')
mle.vmf(myx, method='ma1')
myx
library(RiemSphere)
mle.vmf(myx, method="song")
mle.vmf(myx, method="sra")
(1e-3)*1234
library(RiemSphere)
aux_besselI(10, 5, log=FALSE)
besselI(10, 5)
library(RiemSphere)
# example
mymu = rnorm(4)
mymu = mymu/sqrt(sum(mymu^2))
myx  = RiemSphere::rvmf(100, mymu, kappa=1)
spmean1.lrt(myx, mymu, kappa0=NULL)
spmean1.lrt(myx, mymu, kappa0=1)
# example
mymu = rnorm(4)
mymu = mymu/sqrt(sum(mymu^2))
myx  = RiemSphere::rvmf(100, mymu, kappa=1)
spmean1.lrt(myx, mymu, kappa0=NULL)
spmean1.lrt(myx, mymu, kappa0=1)
# example
mymu = rnorm(4)
mymu = mymu/sqrt(sum(mymu^2))
myx  = RiemSphere::rvmf(100, mymu, kappa=1)
spmean1.lrt(myx, mymu, kappa0=NULL)
spmean1.lrt(myx, mymu, kappa0=1)
# example
mymu = rnorm(4)
mymu = mymu/sqrt(sum(mymu^2))
myx  = RiemSphere::rvmf(100, mymu, kappa=1)
spmean1.lrt(myx, mymu, kappa0=NULL)
spmean1.lrt(myx, mymu, kappa0=1)
## simply test
x = rvmf(50, c(1,rep(0,7)), 10)
mle.vmf(x, method="banerjee")
mle.vmf(x, method="song")
mle.vmf(x, method="sra")
mle.vmf(x, method="tanabe")
mle.vmf(x, method="uniroot")
mle.vmf(x, method="ma1")
mle.vmf(x, method="ma2")
mle.vmf(x, method="me1")
mle.vmf(x, method="me2")
## simply test
x = rvmf(50, c(1,rep(0,7)), 10)
mle.vmf(x, method="banerjee")
mle.vmf(x, method="song")
mle.vmf(x, method="sra")
mle.vmf(x, method="tanabe")
mle.vmf(x, method="uniroot")
mle.vmf(x, method="ma1")
mle.vmf(x, method="ma2")
mle.vmf(x, method="me1")
mle.vmf(x, method="me2")
## simply test
x = rvmf(50, c(1,rep(0,7)), 10)
mle.vmf(x, method="banerjee")
mle.vmf(x, method="song")
mle.vmf(x, method="sra")
mle.vmf(x, method="tanabe")
mle.vmf(x, method="uniroot")
mle.vmf(x, method="ma1")
mle.vmf(x, method="ma2")
mle.vmf(x, method="me1")
mle.vmf(x, method="me2")
library(RiemSphere)
mle.vmf(x, method="me2")
mle.vmf(x, method="me1")
library(RiemSphere)
mle.vmf(x, method="me1")
library(RiemSphere)
mle.vmf(x, method="me1")
library(RiemSphere)
mle.vmf(x, method="me1")
library(RiemSphere)
mle.vmf(x, method="me1")
library(RiemSphere)
mle.vmf(x, method="me1")
library(RiemSphere)
mle.vmf(x, method="me1")
library(RiemSphere)
## simply test
x = rvmf(50, c(1,rep(0,7)), 10)
mle.vmf(x, method="banerjee")
mle.vmf(x, method="song")
mle.vmf(x, method="sra")
mle.vmf(x, method="tanabe")
mle.vmf(x, method="uniroot")
mle.vmf(x, method="ma1")
mle.vmf(x, method="ma2")
mle.vmf(x, method="me1")
mle.vmf(x, method="me2")
library(RiemSphere)
## simply test
x = rvmf(50, c(1,rep(0,7)), 10)
mle.vmf(x, method="banerjee")
mle.vmf(x, method="song")
mle.vmf(x, method="sra")
mle.vmf(x, method="tanabe")
mle.vmf(x, method="uniroot")
mle.vmf(x, method="ma1")
mle.vmf(x, method="ma2")
mle.vmf(x, method="me1")
mle.vmf(x, method="me2")
mle.vmf(x, method="banerjee")
mle.vmf(x, method="song")
mle.vmf(x, method="sra")
mle.vmf(x, method="tanabe")
mle.vmf(x, method="uniroot")
mle.vmf(x, method="ma1")
mle.vmf(x, method="ma2")
mle.vmf(x, method="me1")
mle.vmf(x, method="me2")
library(Bessel)
help("besselIasym")
help(tryCatch)
help("besselI.nuAsym")
library(RiemSphere)
## simply test
x = rvmf(50, c(1,rep(0,7)), 10)
mle.vmf(x, method="banerjee")
mle.vmf(x, method="song")
mle.vmf(x, method="sra")
mle.vmf(x, method="tanabe")
mle.vmf(x, method="uniroot")
mle.vmf(x, method="nmarg1")
mle.vmf(x, method="nmarg2")
output = tryCatch({1+2}, error <- function(e){10})
output = tryCatch(1+2, error <- function(e){10})
tryCathc({1+2})
tryCatch({1+2})
output = tryCatch({1+2}, error <- function(e){10})
help(tryCatch)
library(RiemSphere)
## simply test
x = rvmf(50, c(1,rep(0,7)), 10)
mle.vmf(x, method="banerjee")
mle.vmf(x, method="song")
mle.vmf(x, method="sra")
mle.vmf(x, method="tanabe")
mle.vmf(x, method="uniroot")
mle.vmf(x, method="nmarg1")
mle.vmf(x, method="nmarg2")
# 16. aux_besselI ---------------------------------------------------------
#' @export
aux_besselI <- function(x, s, log=TRUE){
c0 = 1.000000000190015
c1 = 76.18009172947146
c2 = -86.50532032941677
c3 = 24.01409824083091
c4 = 1.231739572450155
c5 = 1.208650973866179*(1e-3)
c6 = -5.395239384953*(1e-6)
t1 = c0 + c1/(s+1) + c2/(s+2) + c3/(s+3) + c4/(s+4) + c5/(s+5) + c6/(s+6)
t2 = (s+0.5)*log(s+5.5) - (s+5.5)
t1 = s*log(0.5*x) - 0.5*log(2*pi) - t2 - log(t1)
R = 1.0
M = 1.0
k = 1
epsthr  = 1e-6
epserr.bessel  = 1000
maxiter = 500
citer   = 1
x2      = (x^2)
while (epserr.bessel > epsthr){
citer = citer + 1
R = R*(0.25*(x2))/((s+k)*k)
M = M + R
epserr.bessel = R/M
k = (k+1)
citer = citer + 1
if (citer > maxiter){
break
}
}
output = t1 + log(M)
if (log==FALSE){
output = exp(output)
}
return(output)
}
# 13. aux_ for von-Mises  -------------------------------------------------
#' @keywords internal
#' @noRd
aux_vmf_Apk <- function(p, kappa){
if (kappa > 100){
output = tryCatch(
{exp(besselIasym(kappa, p/2, log=TRUE) - besselIasym(kappa, (p/2)-1, log=TRUE))},
error   <- exp(aux_besselI(kappa, p/2)-aux_besselI(kappa, (p/2)-1)),
warning <- exp(aux_besselI(kappa, p/2)-aux_besselI(kappa, (p/2)-1))
)
} else if (p > 100){
output = tryCatch({
exp(besselI.nuAsym(kappa, p/2, 5, log=TRUE)-besselI.nuAsym(kappa, (p/2)-1, 5, log=TRUE))
}, error <- function(cond){
exp(aux_besselI(kappa, p/2)-aux_besselI(kappa, (p/2)-1))
}, warning <- function(){
exp(aux_besselI(kappa, p/2)-aux_besselI(kappa, (p/2)-1))
})
}
return(output)
}
aux_vmf_Apk(10,100)
output = tryCatch(
{exp(besselIasym(kappa, p/2, log=TRUE) - besselIasym(kappa, (p/2)-1, log=TRUE))},
error   <- exp(aux_besselI(kappa, p/2)-aux_besselI(kappa, (p/2)-1)),
warning <- exp(aux_besselI(kappa, p/2)-aux_besselI(kappa, (p/2)-1))
)
p = 10
kappa = 42
output = tryCatch(
{exp(besselIasym(kappa, p/2, log=TRUE) - besselIasym(kappa, (p/2)-1, log=TRUE))},
error   <- exp(aux_besselI(kappa, p/2)-aux_besselI(kappa, (p/2)-1)),
warning <- exp(aux_besselI(kappa, p/2)-aux_besselI(kappa, (p/2)-1))
)
output = tryCatch({
exp(besselIasym(kappa, p/2, log=TRUE) - besselIasym(kappa, (p/2)-1, log=TRUE))},
error   <- exp(aux_besselI(kappa, p/2)-aux_besselI(kappa, (p/2)-1)),
warning <- exp(aux_besselI(kappa, p/2)-aux_besselI(kappa, (p/2)-1))
)
output = tryCatch({
exp(besselIasym(kappa, p/2, log=TRUE) - besselIasym(kappa, (p/2)-1, log=TRUE))},
error   <- function(e){
return(exp(aux_besselI(kappa, p/2)-aux_besselI(kappa, (p/2)-1)))},
warning <- function(w){
return(exp(aux_besselI(kappa, p/2)-aux_besselI(kappa, (p/2)-1)))}
)
output = tryCatch({
exp(besselIasym(kappa, p/2, log=TRUE) - besselIasym(kappa, (p/2)-1, log=TRUE))
}, error   <- function(e){
return(exp(aux_besselI(kappa, p/2)-aux_besselI(kappa, (p/2)-1)))
}, warning <- function(w){
return(exp(aux_besselI(kappa, p/2)-aux_besselI(kappa, (p/2)-1)))}
)
tryCatch({
output = exp(besselIasym(kappa, p/2, log=TRUE) - besselIasym(kappa, (p/2)-1, log=TRUE))
}, error <- function(e){
output = exp(aux_besselI(kappa, p/2)-aux_besselI(kappa, (p/2)-1))
}, warning <- function(w){
output <- exp(aux_besselI(kappa, p/2)-aux_besselI(kappa, (p/2)-1))
})
output = tryCatch({
exp(besselIasym(kappa, p/2, log=TRUE) - besselIasym(kappa, (p/2)-1, log=TRUE))
}, error <- function(e){
exp(aux_besselI(kappa, p/2)-aux_besselI(kappa, (p/2)-1))
}, warning <- function(w){
exp(aux_besselI(kappa, p/2)-aux_besselI(kappa, (p/2)-1))
})
1/0
matrix(rnorm(25),nrow=5)/matrix(rnorm(16),nrow=4)
output = tryCatch({matrix(rnorm(25),nrow=5)/matrix(rnorm(16),nrow=4)},
error <- function(e){
1
})
output = tryCatch({
matrix(rnorm(25),nrow=5)/matrix(rnorm(16),nrow=4)
}, error <- function(e){1})
output = tryCatch(
matrix(rnorm(25),nrow=5)/matrix(rnorm(16),nrow=4),
error <- function(e){1})
library(Bessel)
output = tryCatch(
matrix(rnorm(25),nrow=5)/matrix(rnorm(16),nrow=4),
error <- function(e){1})
output = tryCatch(
matrix(rnorm(25),nrow=5)/matrix(rnorm(16),nrow=4),
error = function(e){1})
output
output = tryCatch({
exp(besselIasym(kappa, p/2, log=TRUE) - besselIasym(kappa, (p/2)-1, log=TRUE))
}, error = function(e){
exp(aux_besselI(kappa, p/2)-aux_besselI(kappa, (p/2)-1))
}, warning = function(w){
exp(aux_besselI(kappa, p/2)-aux_besselI(kappa, (p/2)-1))
})
output
library(RiemSphere)
library(RiemSphere)
## simply test
x = rvmf(50, c(1,rep(0,7)), 10)
mle.vmf(x, method="banerjee")
mle.vmf(x, method="song")
mle.vmf(x, method="sra")
mle.vmf(x, method="tanabe")
mle.vmf(x, method="uniroot")
mle.vmf(x, method="nmarg1")
mle.vmf(x, method="nmarg2")
mle.vmf(x, method="banerjee")
mle.vmf(x, method="song")
mle.vmf(x, method="sra")
mle.vmf(x, method="tanabe")
mle.vmf(x, method="uniroot")
mle.vmf(x, method="nmarg1")
## simply test
x = rvmf(50, c(1,rep(0,7)), 10)
mle.vmf(x, method="banerjee")
mle.vmf(x, method="song")
mle.vmf(x, method="sra")
mle.vmf(x, method="tanabe")
mle.vmf(x, method="uniroot")
mle.vmf(x, method="nmarg1")
mle.vmf(x, method="nmarg2")
library(RiemSphere)
## simply test
x = rvmf(50, c(1,rep(0,7)), 10)
mle.vmf(x, method="banerjee")
mle.vmf(x, method="song")
mle.vmf(x, method="sra")
mle.vmf(x, method="tanabe")
mle.vmf(x, method="uniroot")
mle.vmf(x, method="nmarg1")
mle.vmf(x, method="nmarg2")
mle.vmf(x, method="banerjee")
mle.vmf(x, method="song")
## simply test
x = rvmf(500, c(1,rep(0,7)), 10)
mle.vmf(x, method="banerjee")
mle.vmf(x, method="song")
mle.vmf(x, method="sra")
mle.vmf(x, method="tanabe")
mle.vmf(x, method="uniroot")
mle.vmf(x, method="nmarg1")
mle.vmf(x, method="nmarg2")
mle.vmf(x, method="banerjee")
mle.vmf(x, method="song")
mle.vmf(x, method="sra")
mle.vmf(x, method="tanabe")
mle.vmf(x, method="uniroot")
mle.vmf(x, method="nmarg1")
mle.vmf(x, method="nmarg2")
mle.vfm(x, method="me1")
mle.vmf(x, method="me1")
library(RiemSphere)
mle.vmf(x, method="me1")
mle.vmf(x, method="me1")
library(RiemSphere)
mle.vmf(x, method="banerjee")
mle.vmf(x, method="song")
mle.vmf(x, method="sra")
mle.vmf(x, method="tanabe")
mle.vmf(x, method="uniroot")
mle.vmf(x, method="nmarg1")
mle.vmf(x, method="nmarg2")
mle.vmf(x, method="me1")
mle.vmf(x, method="me2")
library(RiemSphere)
sqrt(sqrt(.Machine$double.eps))
sqrt(sqrt(sqrt(.Machine$double.eps)))
library(RiemSphere)
## simply test
x = rvmf(500, c(1,rep(0,7)), 10)
mle.vmf(x, method="banerjee")
mle.vmf(x, method="song")
mle.vmf(x, method="sra")
mle.vmf(x, method="tanabe")
mle.vmf(x, method="uniroot")
mle.vmf(x, method="nmarg1")
mle.vmf(x, method="nmarg2")
mle.vmf(x, method="me1")
mle.vmf(x, method="me2")
mle.vmf(x, method="nmle1")
mle.vmf(x, method="nmle2")
library(RiemSphere)
mle.vmf(x, method="nmle1")
mle.vmf(x, method="nmle2")
library(RiemSphere)
# example
mymu = rnorm(4)
mymu = mymu/sqrt(sum(mymu^2))
myx  = RiemSphere::rvmf(100, mymu, kappa=1)
spmean1.lrt(myx, mymu, kappa0=NULL)
spmean1.lrt(myx, mymu, kappa0=1)
# example
mymu = rnorm(4)
mymu = mymu/sqrt(sum(mymu^2))
myx  = RiemSphere::rvmf(100, mymu, kappa=1)
spmean1.lrt(myx, mymu, kappa0=NULL)
spmean1.lrt(myx, mymu, kappa0=1)
library(RiemSphere)
library(RiemSphere)
library(RiemSphere)
library(RiemSphere)
# example
mymu = rnorm(4)
mymu = mymu/sqrt(sum(mymu^2))
myx  = RiemSphere::rvmf(100, mymu, kappa=1)
spmean1.lrt(myx, mymu, kappa0=NULL)
spmean1.lrt(myx, mymu, kappa0=1)
# example
mymu = rnorm(4)
mymu = mymu/sqrt(sum(mymu^2))
myx  = RiemSphere::rvmf(100, mymu, kappa=1)
spmean1.lrt(myx, mymu, kappa0=NULL)
spmean1.lrt(myx, mymu, kappa0=1)
# example
mymu = rnorm(4)
mymu = mymu/sqrt(sum(mymu^2))
myx  = RiemSphere::rvmf(100, mymu, kappa=1)
spmean1.lrt(myx, mymu, kappa0=NULL)
spmean1.lrt(myx, mymu, kappa0=1)
# example
mymu = rnorm(4)
mymu = mymu/sqrt(sum(mymu^2))
myx  = RiemSphere::rvmf(100, mymu, kappa=1)
spmean1.lrt(myx, mymu, kappa0=NULL)
spmean1.lrt(myx, mymu, kappa0=1)
# example
mymu = rnorm(4)
mymu = mymu/sqrt(sum(mymu^2))
myx  = RiemSphere::rvmf(100, mymu, kappa=1)
spmean1.lrt(myx, mymu, kappa0=NULL)
spmean1.lrt(myx, mymu, kappa0=1)
# example
mymu = rnorm(4)
mymu = mymu/sqrt(sum(mymu^2))
myx  = RiemSphere::rvmf(100, mymu, kappa=1)
spmean1.lrt(myx, mymu, kappa0=NULL)
spmean1.lrt(myx, mymu, kappa0=1)
library(RiemSphere)
library(RiemSphere)
library(RiemSphere)
diag(5)
help(outer)
library(RiemSphere)
# example
mymu = rnorm(4)
mymu = mymu/sqrt(sum(mymu^2))
myx  = RiemSphere::rvmf(100, mymu, kappa=1)
spmean1.lrt(myx, mymu, kappa0=NULL)
spmean1.lrt(myx, mymu, kappa0=1)
library(RiemSphere)
# example
mymu = rnorm(4)
mymu = mymu/sqrt(sum(mymu^2))
myx  = RiemSphere::rvmf(100, mymu, kappa=1)
spmean1.lrt(myx, mymu, kappa0=NULL)
spmean1.lrt(myx, mymu, kappa0=1)
# example
mymu = rnorm(4)
mymu = mymu/sqrt(sum(mymu^2))
myx  = RiemSphere::rvmf(100, mymu, kappa=1)
spmean1.lrt(myx, mymu, kappa0=NULL)
spmean1.lrt(myx, mymu, kappa0=1)
# example
mymu = rnorm(4)
mymu = mymu/sqrt(sum(mymu^2))
myx  = RiemSphere::rvmf(100, mymu, kappa=1)
spmean1.lrt(myx, mymu, kappa0=NULL)
spmean1.lrt(myx, mymu, kappa0=1)
spmean1.lrt(myx, mymu, kappa0=NULL)
library(RiemSphere)
spmean1.lrt(myx, mymu, kappa0=NULL)
# example
mymu = rnorm(4)
mymu = mymu/sqrt(sum(mymu^2))
myx  = RiemSphere::rvmf(100, mymu, kappa=1)
spmean1.score(myx, mymu, kappa0=NULL)
spmean1.score(myx, mymu, kappa0=1)
library(RiemSphere)
# example
mymu = rnorm(4)
mymu = mymu/sqrt(sum(mymu^2))
myx  = RiemSphere::rvmf(100, mymu, kappa=1)
spmean1.score(myx, mymu, kappa0=NULL)
spmean1.score(myx, mymu, kappa0=1)
# example
mymu = rnorm(4)
mymu = mymu/sqrt(sum(mymu^2))
myx  = RiemSphere::rvmf(100, mymu, kappa=1)
spmean1.score(myx, mymu, kappa0=NULL)
spmean1.score(myx, mymu, kappa0=1)
library(RiemSphere)
