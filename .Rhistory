logmux1 = splog(mu1, abs(as.vector(samples[i,])))
logmux2 = splog(mu2, abs(as.vector(samples[i,])))
logmux3 = splog(mu3, abs(as.vector(samples[i,])))
svec1[i] = exp(-(lambda/2)*sum(logmux1*logmux1))
svec2[i] = exp(-(lambda/2)*sum(logmux2*logmux2))
svec3[i] = exp(-(lambda/2)*sum(logmux3*logmux3))
}
numerator1 = cumsum(svec1) # unscaled only
numerator2 = cumsum(svec2) # unscaled only
numerator3 = cumsum(svec3) # unscaled only
xx = 1:n
yy1 = (numerator1/xx)*uscale
yy2 = (numerator2/xx)*uscale
yy3 = (numerator3/xx)*uscale
ymin = min(c(min(yy1),min(yy2),min(yy3)))
ymax = max(c(max(yy1),max(yy2),max(yy3)))
par(mfrow=c(1,3))
plot(xx,yy1,"l",main=paste("4. octant with lambda=",round(lambda,digits=2),sep=""), ylim=c(ymin,ymax))
plot(xx,yy2,"l",main=paste("4. octant with lambda=",round(lambda,digits=2),sep=""), ylim=c(ymin,ymax))
plot(xx,yy3,"l",main=paste("4. octant with lambda=",round(lambda,digits=2),sep=""), ylim=c(ymin,ymax))
p = 5
n = 55555
lambda = abs(rnorm(n=1,mean=0,sd=5)) # if (p,kap)=(10,6.7), convergence is very slow, but still it does.
uscale =2*(pi^(p/2))/gamma(p/2)
mu1 = abs(rnorm(p)); mu1 = mu1/sqrt(sum(mu1^2))
mu2 = abs(rnorm(p)); mu2 = mu2/sqrt(sum(mu2^2))
mu3 = abs(rnorm(p)); mu3 = mu3/sqrt(sum(mu3^2))
samples1 = abs(Rfast::rvmf(n, mu1, 0))       # 'Rfast' package
samples2 = abs(Rfast::rvmf(n, mu2, 0))       # 'Rfast' package
samples3 = abs(Rfast::rvmf(n, mu3, 0))       # 'Rfast' package
svec1 = rep(0,n)
svec2 = rep(0,n)
svec3 = rep(0,n)
for (i in 1:n){
logmux1 = splog(mu1, abs(as.vector(samples1[i,])))
logmux2 = splog(mu2, abs(as.vector(samples2[i,])))
logmux3 = splog(mu3, abs(as.vector(samples3[i,])))
svec1[i] = exp(-(lambda/2)*sum(logmux1*logmux1))
svec2[i] = exp(-(lambda/2)*sum(logmux2*logmux2))
svec3[i] = exp(-(lambda/2)*sum(logmux3*logmux3))
}
numerator1 = cumsum(svec1) # unscaled only
numerator2 = cumsum(svec2) # unscaled only
numerator3 = cumsum(svec3) # unscaled only
xx = 1:n
yy1 = (numerator1/xx)*uscale
yy2 = (numerator2/xx)*uscale
yy3 = (numerator3/xx)*uscale
ymin = min(c(min(yy1),min(yy2),min(yy3)))
ymax = max(c(max(yy1),max(yy2),max(yy3)))
par(mfrow=c(1,3))
plot(xx,yy1,"l",main=paste("4. octant with lambda=",round(lambda,digits=2),sep=""), ylim=c(ymin,ymax))
plot(xx,yy2,"l",main=paste("4. octant with lambda=",round(lambda,digits=2),sep=""), ylim=c(ymin,ymax))
plot(xx,yy3,"l",main=paste("4. octant with lambda=",round(lambda,digits=2),sep=""), ylim=c(ymin,ymax))
p = 5
n = 55555
lambda = abs(rnorm(n=1,mean=0,sd=5)) # if (p,kap)=(10,6.7), convergence is very slow, but still it does.
uscale =2*(pi^(p/2))/gamma(p/2)
mu1 = abs(rnorm(p)); mu1 = mu1/sqrt(sum(mu1^2))
mu2 = abs(rnorm(p)); mu2 = mu2/sqrt(sum(mu2^2))
mu3 = abs(rnorm(p)); mu3 = mu3/sqrt(sum(mu3^2))
samples1 = abs(Rfast::rvmf(n, mu1, 0))       # 'Rfast' package
samples2 = abs(Rfast::rvmf(n, mu2, 0))       # 'Rfast' package
samples3 = abs(Rfast::rvmf(n, mu3, 0))       # 'Rfast' package
svec1 = rep(0,n)
svec2 = rep(0,n)
svec3 = rep(0,n)
for (i in 1:n){
logmux1 = splog(mu1, abs(as.vector(samples1[i,])))
logmux2 = splog(mu2, abs(as.vector(samples2[i,])))
logmux3 = splog(mu3, abs(as.vector(samples3[i,])))
svec1[i] = exp(-(lambda/2)*sum(logmux1*logmux1))
svec2[i] = exp(-(lambda/2)*sum(logmux2*logmux2))
svec3[i] = exp(-(lambda/2)*sum(logmux3*logmux3))
}
numerator1 = cumsum(svec1) # unscaled only
numerator2 = cumsum(svec2) # unscaled only
numerator3 = cumsum(svec3) # unscaled only
xx = 1:n
yy1 = (numerator1/xx)*uscale
yy2 = (numerator2/xx)*uscale
yy3 = (numerator3/xx)*uscale
ymin = min(c(min(yy1),min(yy2),min(yy3)))
ymax = max(c(max(yy1),max(yy2),max(yy3)))
par(mfrow=c(1,3))
plot(xx,yy1,"l",main=paste("4. octant with lambda=",round(lambda,digits=2),sep=""), ylim=c(ymin,ymax))
plot(xx,yy2,"l",main=paste("4. octant with lambda=",round(lambda,digits=2),sep=""), ylim=c(ymin,ymax))
plot(xx,yy3,"l",main=paste("4. octant with lambda=",round(lambda,digits=2),sep=""), ylim=c(ymin,ymax))
p = 5
n = 55555
lambda = abs(rnorm(n=1,mean=0,sd=5)) # if (p,kap)=(10,6.7), convergence is very slow, but still it does.
uscale =2*(pi^(p/2))/gamma(p/2)
mu1 = abs(rnorm(p)); mu1 = mu1/sqrt(sum(mu1^2))
mu2 = abs(rnorm(p)); mu2 = mu2/sqrt(sum(mu2^2))
mu3 = abs(rnorm(p)); mu3 = mu3/sqrt(sum(mu3^2))
samples1 = abs(Rfast::rvmf(n, mu1, 0))       # 'Rfast' package
samples2 = abs(Rfast::rvmf(n, mu2, 0))       # 'Rfast' package
samples3 = abs(Rfast::rvmf(n, mu3, 0))       # 'Rfast' package
svec1 = rep(0,n)
svec2 = rep(0,n)
svec3 = rep(0,n)
for (i in 1:n){
logmux1 = splog(mu1, abs(as.vector(samples1[i,])))
logmux2 = splog(mu2, abs(as.vector(samples2[i,])))
logmux3 = splog(mu3, abs(as.vector(samples3[i,])))
svec1[i] = exp(-(lambda/2)*sum(logmux1*logmux1))
svec2[i] = exp(-(lambda/2)*sum(logmux2*logmux2))
svec3[i] = exp(-(lambda/2)*sum(logmux3*logmux3))
}
numerator1 = cumsum(svec1) # unscaled only
numerator2 = cumsum(svec2) # unscaled only
numerator3 = cumsum(svec3) # unscaled only
xx = 1:n
yy1 = (numerator1/xx)*uscale
yy2 = (numerator2/xx)*uscale
yy3 = (numerator3/xx)*uscale
ymin = min(c(min(yy1),min(yy2),min(yy3)))
ymax = max(c(max(yy1),max(yy2),max(yy3)))
par(mfrow=c(1,3))
plot(xx,yy1,"l",main=paste("4. octant with lambda=",round(lambda,digits=2),sep=""), ylim=c(ymin,ymax))
plot(xx,yy2,"l",main=paste("4. octant with lambda=",round(lambda,digits=2),sep=""), ylim=c(ymin,ymax))
plot(xx,yy3,"l",main=paste("4. octant with lambda=",round(lambda,digits=2),sep=""), ylim=c(ymin,ymax))
p = 3
n = 55555
lambda = abs(rnorm(n=1,mean=0,sd=5)) # if (p,kap)=(10,6.7), convergence is very slow, but still it does.
uscale =2*(pi^(p/2))/gamma(p/2)
mu1 = abs(rnorm(p)); mu1 = mu1/sqrt(sum(mu1^2))
mu2 = abs(rnorm(p)); mu2 = mu2/sqrt(sum(mu2^2))
mu3 = abs(rnorm(p)); mu3 = mu3/sqrt(sum(mu3^2))
samples1 = abs(Rfast::rvmf(n, mu1, 0))       # 'Rfast' package
samples2 = abs(Rfast::rvmf(n, mu2, 0))       # 'Rfast' package
samples3 = abs(Rfast::rvmf(n, mu3, 0))       # 'Rfast' package
svec1 = rep(0,n)
svec2 = rep(0,n)
svec3 = rep(0,n)
for (i in 1:n){
logmux1 = splog(mu1, abs(as.vector(samples1[i,])))
logmux2 = splog(mu2, abs(as.vector(samples2[i,])))
logmux3 = splog(mu3, abs(as.vector(samples3[i,])))
svec1[i] = exp(-(lambda/2)*sum(logmux1*logmux1))
svec2[i] = exp(-(lambda/2)*sum(logmux2*logmux2))
svec3[i] = exp(-(lambda/2)*sum(logmux3*logmux3))
}
numerator1 = cumsum(svec1) # unscaled only
numerator2 = cumsum(svec2) # unscaled only
numerator3 = cumsum(svec3) # unscaled only
xx = 1:n
yy1 = (numerator1/xx)*uscale
yy2 = (numerator2/xx)*uscale
yy3 = (numerator3/xx)*uscale
ymin = min(c(min(yy1),min(yy2),min(yy3)))
ymax = max(c(max(yy1),max(yy2),max(yy3)))
par(mfrow=c(1,3))
plot(xx,yy1,"l",main=paste("4. octant with lambda=",round(lambda,digits=2),sep=""), ylim=c(ymin,ymax))
plot(xx,yy2,"l",main=paste("4. octant with lambda=",round(lambda,digits=2),sep=""), ylim=c(ymin,ymax))
plot(xx,yy3,"l",main=paste("4. octant with lambda=",round(lambda,digits=2),sep=""), ylim=c(ymin,ymax))
p = 3
n = 55555
lambda = abs(rnorm(n=1,mean=0,sd=5)) # if (p,kap)=(10,6.7), convergence is very slow, but still it does.
uscale =2*(pi^(p/2))/gamma(p/2)
mu1 = abs(rnorm(p)); mu1 = mu1/sqrt(sum(mu1^2))
mu2 = abs(rnorm(p)); mu2 = mu2/sqrt(sum(mu2^2))
mu3 = abs(rnorm(p)); mu3 = mu3/sqrt(sum(mu3^2))
samples1 = abs(Rfast::rvmf(n, mu1, 0))       # 'Rfast' package
samples2 = abs(Rfast::rvmf(n, mu2, 0))       # 'Rfast' package
samples3 = abs(Rfast::rvmf(n, mu3, 0))       # 'Rfast' package
svec1 = rep(0,n)
svec2 = rep(0,n)
svec3 = rep(0,n)
for (i in 1:n){
logmux1 = splog(mu1, abs(as.vector(samples1[i,])))
logmux2 = splog(mu2, abs(as.vector(samples2[i,])))
logmux3 = splog(mu3, abs(as.vector(samples3[i,])))
svec1[i] = exp(-(lambda/2)*sum(logmux1*logmux1))
svec2[i] = exp(-(lambda/2)*sum(logmux2*logmux2))
svec3[i] = exp(-(lambda/2)*sum(logmux3*logmux3))
}
numerator1 = cumsum(svec1) # unscaled only
numerator2 = cumsum(svec2) # unscaled only
numerator3 = cumsum(svec3) # unscaled only
xx = 1:n
yy1 = (numerator1/xx)*uscale
yy2 = (numerator2/xx)*uscale
yy3 = (numerator3/xx)*uscale
ymin = min(c(min(yy1),min(yy2),min(yy3)))
ymax = max(c(max(yy1),max(yy2),max(yy3)))
par(mfrow=c(1,3))
plot(xx,yy1,"l",main=paste("4. octant with lambda=",round(lambda,digits=2),sep=""), ylim=c(ymin,ymax))
plot(xx,yy2,"l",main=paste("4. octant with lambda=",round(lambda,digits=2),sep=""), ylim=c(ymin,ymax))
plot(xx,yy3,"l",main=paste("4. octant with lambda=",round(lambda,digits=2),sep=""), ylim=c(ymin,ymax))
p = 3
n = 55555
lambda = abs(rnorm(n=1,mean=0,sd=5)) # if (p,kap)=(10,6.7), convergence is very slow, but still it does.
uscale =2*(pi^(p/2))/gamma(p/2)
mu1 = abs(rnorm(p)); mu1 = mu1/sqrt(sum(mu1^2))
mu2 = abs(rnorm(p)); mu2 = mu2/sqrt(sum(mu2^2))
mu3 = abs(rnorm(p)); mu3 = mu3/sqrt(sum(mu3^2))
samples1 = abs(Rfast::rvmf(n, mu1, 0))       # 'Rfast' package
samples2 = abs(Rfast::rvmf(n, mu2, 0))       # 'Rfast' package
samples3 = abs(Rfast::rvmf(n, mu3, 0))       # 'Rfast' package
svec1 = rep(0,n)
svec2 = rep(0,n)
svec3 = rep(0,n)
for (i in 1:n){
logmux1 = splog(mu1, abs(as.vector(samples1[i,])))
logmux2 = splog(mu2, abs(as.vector(samples2[i,])))
logmux3 = splog(mu3, abs(as.vector(samples3[i,])))
svec1[i] = exp(-(lambda/2)*sum(logmux1*logmux1))
svec2[i] = exp(-(lambda/2)*sum(logmux2*logmux2))
svec3[i] = exp(-(lambda/2)*sum(logmux3*logmux3))
}
numerator1 = cumsum(svec1) # unscaled only
numerator2 = cumsum(svec2) # unscaled only
numerator3 = cumsum(svec3) # unscaled only
xx = 1:n
yy1 = (numerator1/xx)*uscale
yy2 = (numerator2/xx)*uscale
yy3 = (numerator3/xx)*uscale
ymin = min(c(min(yy1),min(yy2),min(yy3)))
ymax = max(c(max(yy1),max(yy2),max(yy3)))
par(mfrow=c(1,3))
plot(xx,yy1,"l",main=paste("4. octant with lambda=",round(lambda,digits=2),sep=""), ylim=c(ymin,ymax))
plot(xx,yy2,"l",main=paste("4. octant with lambda=",round(lambda,digits=2),sep=""), ylim=c(ymin,ymax))
plot(xx,yy3,"l",main=paste("4. octant with lambda=",round(lambda,digits=2),sep=""), ylim=c(ymin,ymax))
xxx = samples1[10,]
sum(xxx^2)
p = 4
n = 55555
lambda = abs(rnorm(n=1,mean=0,sd=5)) # if (p,kap)=(10,6.7), convergence is very slow, but still it does.
uscale =2*(pi^(p/2))/gamma(p/2)
mu1 = abs(rnorm(p)); mu1 = mu1/sqrt(sum(mu1^2))
mu2 = abs(rnorm(p)); mu2 = mu2/sqrt(sum(mu2^2))
mu3 = abs(rnorm(p)); mu3 = mu3/sqrt(sum(mu3^2))
samples1 = abs(Rfast::rvmf(n, mu1, 0))       # 'Rfast' package
samples2 = abs(Rfast::rvmf(n, mu2, 0))       # 'Rfast' package
samples3 = abs(Rfast::rvmf(n, mu3, 0))       # 'Rfast' package
svec1 = rep(0,n)
svec2 = rep(0,n)
svec3 = rep(0,n)
for (i in 1:n){
logmux1 = splog(mu1, abs(as.vector(samples1[i,])))
logmux2 = splog(mu2, abs(as.vector(samples2[i,])))
logmux3 = splog(mu3, abs(as.vector(samples3[i,])))
svec1[i] = exp(-(lambda/2)*sum(logmux1*logmux1))
svec2[i] = exp(-(lambda/2)*sum(logmux2*logmux2))
svec3[i] = exp(-(lambda/2)*sum(logmux3*logmux3))
}
numerator1 = cumsum(svec1) # unscaled only
numerator2 = cumsum(svec2) # unscaled only
numerator3 = cumsum(svec3) # unscaled only
xx = 1:n
yy1 = (numerator1/xx)*uscale
yy2 = (numerator2/xx)*uscale
yy3 = (numerator3/xx)*uscale
ymin = min(c(min(yy1),min(yy2),min(yy3)))
ymax = max(c(max(yy1),max(yy2),max(yy3)))
par(mfrow=c(1,3))
plot(xx,yy1,"l",main=paste("4. octant with lambda=",round(lambda,digits=2),sep=""), ylim=c(ymin,ymax))
plot(xx,yy2,"l",main=paste("4. octant with lambda=",round(lambda,digits=2),sep=""), ylim=c(ymin,ymax))
plot(xx,yy3,"l",main=paste("4. octant with lambda=",round(lambda,digits=2),sep=""), ylim=c(ymin,ymax))
p = 4
n = 100000
lambda = abs(rnorm(n=1,mean=0,sd=5)) # if (p,kap)=(10,6.7), convergence is very slow, but still it does.
uscale =2*(pi^(p/2))/gamma(p/2)
mu1 = abs(rnorm(p)); mu1 = mu1/sqrt(sum(mu1^2))
mu2 = abs(rnorm(p)); mu2 = mu2/sqrt(sum(mu2^2))
mu3 = abs(rnorm(p)); mu3 = mu3/sqrt(sum(mu3^2))
samples1 = abs(Rfast::rvmf(n, mu1, 0))       # 'Rfast' package
samples2 = abs(Rfast::rvmf(n, mu2, 0))       # 'Rfast' package
samples3 = abs(Rfast::rvmf(n, mu3, 0))       # 'Rfast' package
svec1 = rep(0,n)
svec2 = rep(0,n)
svec3 = rep(0,n)
for (i in 1:n){
logmux1 = splog(mu1, abs(as.vector(samples1[i,])))
logmux2 = splog(mu2, abs(as.vector(samples2[i,])))
logmux3 = splog(mu3, abs(as.vector(samples3[i,])))
svec1[i] = exp(-(lambda/2)*sum(logmux1*logmux1))
svec2[i] = exp(-(lambda/2)*sum(logmux2*logmux2))
svec3[i] = exp(-(lambda/2)*sum(logmux3*logmux3))
}
numerator1 = cumsum(svec1) # unscaled only
numerator2 = cumsum(svec2) # unscaled only
numerator3 = cumsum(svec3) # unscaled only
xx = 1:n
yy1 = (numerator1/xx)*uscale
yy2 = (numerator2/xx)*uscale
yy3 = (numerator3/xx)*uscale
ymin = min(c(min(yy1),min(yy2),min(yy3)))
ymax = max(c(max(yy1),max(yy2),max(yy3)))
par(mfrow=c(1,3))
plot(xx,yy1,"l",main=paste("4. octant with lambda=",round(lambda,digits=2),sep=""), ylim=c(ymin,ymax))
plot(xx,yy2,"l",main=paste("4. octant with lambda=",round(lambda,digits=2),sep=""), ylim=c(ymin,ymax))
plot(xx,yy3,"l",main=paste("4. octant with lambda=",round(lambda,digits=2),sep=""), ylim=c(ymin,ymax))
p = 4
n = 100000
lambda = abs(rnorm(n=1,mean=0,sd=5)) # if (p,kap)=(10,6.7), convergence is very slow, but still it does.
uscale =2*(pi^(p/2))/gamma(p/2)
mu1 = abs(rnorm(p)); mu1 = mu1/sqrt(sum(mu1^2))
mu2 = abs(rnorm(p)); mu2 = mu2/sqrt(sum(mu2^2))
mu3 = abs(rnorm(p)); mu3 = mu3/sqrt(sum(mu3^2))
samples1 = abs(Rfast::rvmf(n, mu1, 0))       # 'Rfast' package
samples2 = abs(Rfast::rvmf(n, mu2, 0))       # 'Rfast' package
samples3 = abs(Rfast::rvmf(n, mu3, 0))       # 'Rfast' package
svec1 = rep(0,n)
svec2 = rep(0,n)
svec3 = rep(0,n)
for (i in 1:n){
logmux1 = splog(mu1, abs(as.vector(samples1[i,])))
logmux2 = splog(mu2, abs(as.vector(samples2[i,])))
logmux3 = splog(mu3, abs(as.vector(samples3[i,])))
svec1[i] = exp(-(lambda/2)*sum(logmux1*logmux1))
svec2[i] = exp(-(lambda/2)*sum(logmux2*logmux2))
svec3[i] = exp(-(lambda/2)*sum(logmux3*logmux3))
}
numerator1 = cumsum(svec1) # unscaled only
numerator2 = cumsum(svec2) # unscaled only
numerator3 = cumsum(svec3) # unscaled only
xx = 1:n
yy1 = (numerator1/xx)*uscale
yy2 = (numerator2/xx)*uscale
yy3 = (numerator3/xx)*uscale
ymin = min(c(min(yy1),min(yy2),min(yy3)))
ymax = max(c(max(yy1),max(yy2),max(yy3)))
par(mfrow=c(1,3))
plot(xx,yy1,"l",main=paste("4. octant with lambda=",round(lambda,digits=2),sep=""), ylim=c(ymin,ymax))
plot(xx,yy2,"l",main=paste("4. octant with lambda=",round(lambda,digits=2),sep=""), ylim=c(ymin,ymax))
plot(xx,yy3,"l",main=paste("4. octant with lambda=",round(lambda,digits=2),sep=""), ylim=c(ymin,ymax))
p = 4
n = 100000
lambda = abs(rnorm(n=1,mean=0,sd=5)) # if (p,kap)=(10,6.7), convergence is very slow, but still it does.
uscale =2*(pi^(p/2))/gamma(p/2)
mu1 = abs(rnorm(p)); mu1 = mu1/sqrt(sum(mu1^2))
mu2 = abs(rnorm(p)); mu2 = mu2/sqrt(sum(mu2^2))
mu3 = abs(rnorm(p)); mu3 = mu3/sqrt(sum(mu3^2))
samples1 = abs(Rfast::rvmf(n, mu1, 0))       # 'Rfast' package
samples2 = abs(Rfast::rvmf(n, mu2, 0))       # 'Rfast' package
samples3 = abs(Rfast::rvmf(n, mu3, 0))       # 'Rfast' package
svec1 = rep(0,n)
svec2 = rep(0,n)
svec3 = rep(0,n)
for (i in 1:n){
logmux1 = splog(mu1, abs(as.vector(samples1[i,])))
logmux2 = splog(mu2, abs(as.vector(samples2[i,])))
logmux3 = splog(mu3, abs(as.vector(samples3[i,])))
svec1[i] = exp(-(lambda/2)*sum(logmux1*logmux1))
svec2[i] = exp(-(lambda/2)*sum(logmux2*logmux2))
svec3[i] = exp(-(lambda/2)*sum(logmux3*logmux3))
}
numerator1 = cumsum(svec1) # unscaled only
numerator2 = cumsum(svec2) # unscaled only
numerator3 = cumsum(svec3) # unscaled only
xx = 1:n
yy1 = (numerator1/xx)*uscale
yy2 = (numerator2/xx)*uscale
yy3 = (numerator3/xx)*uscale
ymin = min(c(min(yy1),min(yy2),min(yy3)))
ymax = max(c(max(yy1),max(yy2),max(yy3)))
par(mfrow=c(1,3))
plot(xx,yy1,"l",main=paste("4. octant with lambda=",round(lambda,digits=2),sep=""), ylim=c(ymin,ymax))
plot(xx,yy2,"l",main=paste("4. octant with lambda=",round(lambda,digits=2),sep=""), ylim=c(ymin,ymax))
plot(xx,yy3,"l",main=paste("4. octant with lambda=",round(lambda,digits=2),sep=""), ylim=c(ymin,ymax))
p = 4
n = 10000
lambda = abs(rnorm(n=1,mean=0,sd=5)) # if (p,kap)=(10,6.7), convergence is very slow, but still it does.
uscale =2*(pi^(p/2))/gamma(p/2)
mu1 = abs(rnorm(p)); mu1 = mu1/sqrt(sum(mu1^2))
mu2 = abs(rnorm(p)); mu2 = mu2/sqrt(sum(mu2^2))
mu3 = abs(rnorm(p)); mu3 = mu3/sqrt(sum(mu3^2))
samples0 = abs(Rfast::rvmf(n, c(rep(0,p-1),1), 0))
samples1 = abs(Rfast::rvmf(n, mu1, 0))       # 'Rfast' package
samples2 = abs(Rfast::rvmf(n, mu2, 0))       # 'Rfast' package
samples3 = abs(Rfast::rvmf(n, mu3, 0))       # 'Rfast' package
svec01 = rep(0,n)
svec02 = rep(0,n)
svec03 = rep(0,n)
svec1 = rep(0,n)
svec2 = rep(0,n)
svec3 = rep(0,n)
for (i in 1:n){
logmux1 = splog(mu1, abs(as.vector(samples1[i,])))
logmux2 = splog(mu2, abs(as.vector(samples2[i,])))
logmux3 = splog(mu3, abs(as.vector(samples3[i,])))
svec1[i] = exp(-(lambda/2)*sum(logmux1*logmux1))
svec2[i] = exp(-(lambda/2)*sum(logmux2*logmux2))
svec3[i] = exp(-(lambda/2)*sum(logmux3*logmux3))
logmux01 = splog(mu1, abs(as.vector(samples0[i,])))
logmux02 = splog(mu2, abs(as.vector(samples0[i,])))
logmux03 = splog(mu3, abs(as.vector(samples0[i,])))
svec01[i] = exp(-(lambda/2)*sum(logmux01*logmux01))
svec02[i] = exp(-(lambda/2)*sum(logmux02*logmux02))
svec03[i] = exp(-(lambda/2)*sum(logmux03*logmux03))
}
numerator1 = cumsum(svec1) # unscaled only
numerator2 = cumsum(svec2) # unscaled only
numerator3 = cumsum(svec3) # unscaled only
xx = 1:n
yy1 = (numerator1/xx)*uscale
yy2 = (numerator2/xx)*uscale
yy3 = (numerator3/xx)*uscale
yy01 = (cumsum(svec01)/xx)*uscale
yy02 = (cumsum(svec02)/xx)*uscale
yy03 = (cumsum(svec03)/xx)*uscale
ymin = min(c(min(yy1),min(yy2),min(yy3)))
ymax = max(c(max(yy1),max(yy2),max(yy3)))
par(mfrow=c(1,3))
plot(xx,yy1,"l",main=paste("4. octant with lambda=",round(lambda,digits=2),sep=""), ylim=c(ymin,ymax))
abline(lwd=2,col="red",h=median(yy01))
plot(xx,yy2,"l",main=paste("4. octant with lambda=",round(lambda,digits=2),sep=""), ylim=c(ymin,ymax))
abline(lwd=2,col="red",h=median(yy02))
plot(xx,yy3,"l",main=paste("4. octant with lambda=",round(lambda,digits=2),sep=""), ylim=c(ymin,ymax))
abline(lwd=2,col="red",h=median(yy03))
p = 4
n = 10000
lambda = abs(rnorm(n=1,mean=0,sd=5)) # if (p,kap)=(10,6.7), convergence is very slow, but still it does.
uscale =2*(pi^(p/2))/gamma(p/2)
mu1 = abs(rnorm(p)); mu1 = mu1/sqrt(sum(mu1^2))
mu2 = abs(rnorm(p)); mu2 = mu2/sqrt(sum(mu2^2))
mu3 = abs(rnorm(p)); mu3 = mu3/sqrt(sum(mu3^2))
samples0 = abs(Rfast::rvmf(n, c(rep(0,p-1),1), 0))
samples1 = abs(Rfast::rvmf(n, mu1, 0))       # 'Rfast' package
samples2 = abs(Rfast::rvmf(n, mu2, 0))       # 'Rfast' package
samples3 = abs(Rfast::rvmf(n, mu3, 0))       # 'Rfast' package
svec01 = rep(0,n)
svec02 = rep(0,n)
svec03 = rep(0,n)
svec1 = rep(0,n)
svec2 = rep(0,n)
svec3 = rep(0,n)
for (i in 1:n){
logmux1 = splog(mu1, abs(as.vector(samples1[i,])))
logmux2 = splog(mu2, abs(as.vector(samples2[i,])))
logmux3 = splog(mu3, abs(as.vector(samples3[i,])))
svec1[i] = exp(-(lambda/2)*sum(logmux1*logmux1))
svec2[i] = exp(-(lambda/2)*sum(logmux2*logmux2))
svec3[i] = exp(-(lambda/2)*sum(logmux3*logmux3))
logmux01 = splog(mu1, abs(as.vector(samples0[i,])))
logmux02 = splog(mu2, abs(as.vector(samples0[i,])))
logmux03 = splog(mu3, abs(as.vector(samples0[i,])))
svec01[i] = exp(-(lambda/2)*sum(logmux01*logmux01))
svec02[i] = exp(-(lambda/2)*sum(logmux02*logmux02))
svec03[i] = exp(-(lambda/2)*sum(logmux03*logmux03))
}
numerator1 = cumsum(svec1) # unscaled only
numerator2 = cumsum(svec2) # unscaled only
numerator3 = cumsum(svec3) # unscaled only
xx = 1:n
yy1 = (numerator1/xx)*uscale
yy2 = (numerator2/xx)*uscale
yy3 = (numerator3/xx)*uscale
yy01 = (cumsum(svec01)/xx)*uscale
yy02 = (cumsum(svec02)/xx)*uscale
yy03 = (cumsum(svec03)/xx)*uscale
ymin = min(c(min(yy1),min(yy2),min(yy3)))
ymax = max(c(max(yy1),max(yy2),max(yy3)))
par(mfrow=c(1,3))
plot(xx,yy1,"l",main=paste("4. octant with lambda=",round(lambda,digits=2),sep=""), ylim=c(ymin,ymax))
abline(lwd=2,col="red",h=median(yy01))
plot(xx,yy2,"l",main=paste("4. octant with lambda=",round(lambda,digits=2),sep=""), ylim=c(ymin,ymax))
abline(lwd=2,col="red",h=median(yy02))
plot(xx,yy3,"l",main=paste("4. octant with lambda=",round(lambda,digits=2),sep=""), ylim=c(ymin,ymax))
abline(lwd=2,col="red",h=median(yy03))
p = 4
n = 10000
lambda = abs(rnorm(n=1,mean=0,sd=5)) # if (p,kap)=(10,6.7), convergence is very slow, but still it does.
uscale =2*(pi^(p/2))/gamma(p/2)
mu1 = abs(rnorm(p)); mu1 = mu1/sqrt(sum(mu1^2))
mu2 = abs(rnorm(p)); mu2 = mu2/sqrt(sum(mu2^2))
mu3 = abs(rnorm(p)); mu3 = mu3/sqrt(sum(mu3^2))
samples0 = abs(Rfast::rvmf(n, c(rep(0,p-1),1), 0))
samples1 = abs(Rfast::rvmf(n, mu1, 0))       # 'Rfast' package
samples2 = abs(Rfast::rvmf(n, mu2, 0))       # 'Rfast' package
samples3 = abs(Rfast::rvmf(n, mu3, 0))       # 'Rfast' package
svec01 = rep(0,n)
svec02 = rep(0,n)
svec03 = rep(0,n)
svec1 = rep(0,n)
svec2 = rep(0,n)
svec3 = rep(0,n)
for (i in 1:n){
logmux1 = splog(mu1, abs(as.vector(samples1[i,])))
logmux2 = splog(mu2, abs(as.vector(samples2[i,])))
logmux3 = splog(mu3, abs(as.vector(samples3[i,])))
svec1[i] = exp(-(lambda/2)*sum(logmux1*logmux1))
svec2[i] = exp(-(lambda/2)*sum(logmux2*logmux2))
svec3[i] = exp(-(lambda/2)*sum(logmux3*logmux3))
logmux01 = splog(mu1, abs(as.vector(samples0[i,])))
logmux02 = splog(mu2, abs(as.vector(samples0[i,])))
logmux03 = splog(mu3, abs(as.vector(samples0[i,])))
svec01[i] = exp(-(lambda/2)*sum(logmux01*logmux01))
svec02[i] = exp(-(lambda/2)*sum(logmux02*logmux02))
svec03[i] = exp(-(lambda/2)*sum(logmux03*logmux03))
}
numerator1 = cumsum(svec1) # unscaled only
numerator2 = cumsum(svec2) # unscaled only
numerator3 = cumsum(svec3) # unscaled only
xx = 1:n
yy1 = (numerator1/xx)*uscale
yy2 = (numerator2/xx)*uscale
yy3 = (numerator3/xx)*uscale
yy01 = (cumsum(svec01)/xx)*uscale
yy02 = (cumsum(svec02)/xx)*uscale
yy03 = (cumsum(svec03)/xx)*uscale
ymin = min(c(min(yy1),min(yy2),min(yy3)))
ymax = max(c(max(yy1),max(yy2),max(yy3)))
par(mfrow=c(1,3))
plot(xx,yy1,"l",main=paste("4. octant with lambda=",round(lambda,digits=2),sep=""), ylim=c(ymin,ymax))
abline(lwd=2,col="red",h=median(yy01))
plot(xx,yy2,"l",main=paste("4. octant with lambda=",round(lambda,digits=2),sep=""), ylim=c(ymin,ymax))
abline(lwd=2,col="red",h=median(yy02))
plot(xx,yy3,"l",main=paste("4. octant with lambda=",round(lambda,digits=2),sep=""), ylim=c(ymin,ymax))
abline(lwd=2,col="red",h=median(yy03))
