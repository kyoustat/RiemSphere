diag(p) + sin(theta) * A + (cos(theta) - 1) * (b %*%
t(b) + ca %*% t(ca))
}
a = as.vector(A[1,])
b = as.vector(A[2,])
myr = aux_rotation(a,b)
a
myr%*%a
b
library(RiemSphere)
library(RiemSphere)
rm(list=ls())
Directional::rvmf(10,c(0,0,1),1)
RiemSphere::rvmf(10,c(0,0,1),1)
library(RiemSphere)
library(RiemSphere)
library(RiemSphere)
library(RiemSphere)
#
# TESTER FOR MLE ESTIMATION -----------------------------------------------
myp   = 5
mylbd = stats::runif(1, min=0.0001, max=15)
myn   = 2000
aux_log <- function(mu, x){
theta = base::acos(sum(x*mu))
if (abs(theta)<sqrt(.Machine$double.eps)){
output = x-mu*(sum(x*mu))
} else {
output = (x-mu*(sum(x*mu)))*theta/sin(theta)
}
return(output)
}
check_single <- function(x){
return(sum(x^2))
}
aux_dist_1toN <- function(x, maty){
dist_one <- function(y){
logxy = aux_log(x, y)
return(sqrt(sum(logxy^2)))
}
return(apply(maty, 1, dist_one))
}
library(RiemBase)
mymu  = rnorm(myp)
mymu  = mymu/sqrt(sum(mymu^2))
myx   = RiemSphere::rspnorm(myn, mymu, lambda=mylbd)
mymean = as.vector(rbase.mean(riemfactory(t(myx), name="sphere"))$x)
dspnorm.constant <- function(lbd, D){ # lbd : lambda / D : dimension
myfunc <- function(r){
return(exp(-lbd*(r^2)/2)*((sin(r))^(D-2)))
}
t1 = 2*(pi^((D-1)/2))/gamma((D-1)/2) # one possible source of error
t2 = stats::integrate(myfunc, lower=0, upper=pi, rel.tol=sqrt(.Machine$double.eps))$value
return(t1*t2)
}
C = sum(aux_dist_1toN(mymean, myx)^2)
D = ncol(myx)
n = nrow(myx)
# test 1. shape of log-likelihood function --------------------------------
vec.lambda = seq(from=0,to=20,length.out=200)
vec.cost   = rep(0,length(vec.lambda))
for (i in 1:length(vec.lambda)){
tl = vec.lambda[i]
term1 = -(tl/2)*C
term2 = -n*log(dspnorm.constant(tl,D))
vec.cost[i] = term1+term2
}
lopt = vec.lambda[which.max(vec.cost)]
hey = mle.spnorm(myx)
plot(vec.lambda, vec.cost, main="red-MLE, blue-TRUE")
abline(v=hey$method3, lwd=2, col="red")
abline(v=mylbd, lwd=2, col="blue")
# test 2. time comparison for concentration estimation algorithms ---------
x11()
library(ggplot2)
library(microbenchmark)  # time comparison of multiple methods
lbdtime <- microbenchmark(
deoptim = mle.spnorm(myx, method=1),
statopt = mle.spnorm(myx, method=2),
newtons = mle.spnorm(myx, method=3), times=20L
)
autoplot(lbdtime)
# test 3. estimation over iterations --------------------------------------
rec.dir <- rep(0,myn-1)
rec.lbd <- rep(0,myn-1)
for (i in 1:(myn-1)){
tgtmle = mle.spnorm(myx[1:(i+1),])
tgt.mean = tgtmle$mu
tgt.lbd  = tgtmle$lambda
rec.dir[i] = sqrt(sum((mymu-tgt.mean)^2))
rec.lbd[i] = tgt.lbd
print(paste("iteration ",i," complete..",sep=""))
}
x11()
library(ggplot2)
library(microbenchmark)  # time comparison of multiple methods
lbdtime <- microbenchmark(
deoptim = mle.spnorm(myx, method=1),
statopt = mle.spnorm(myx, method=2),
newton1 = mle.spnorm(myx, method=3),
newton2 = mle.spnorm(myx, method=4), times=20L
)
autoplot(lbdtime)
myx
dim(myx)
mle.spnorm(myx, method=4)
library(RiemSphere)
mle.spnorm(myx, method=4)
library(RiemSphere)
mle.spnorm(myx, method=4)
mle.spnorm(myx, method=4)
mle.spnorm(myx, method=4)
mle.spnorm(myx, method=3)
mle.spnorm(myx, method=2)
mle.spnorm(myx, method=1)
mle.spnorm(myx, method=3)
library(RiemSphere)
mle.spnorm(myx, method=3)
mle.spnorm(myx, method=4)
library(RiemSphere)
mle.spnorm(myx, method=4)
mle.spnorm(myx, method=3)
library(RiemSphere)
mle.spnorm(myx, method=3)
library(RiemSphere)
mle.spnorm(myx, method=3)
mle.spnorm(myx, method=3)
myp   = 5
mylbd = stats::runif(1, min=0.0001, max=15)
myn   = 2000
mymu  = rnorm(myp)
mymu  = mymu/sqrt(sum(mymu^2))
myx   = RiemSphere::rspnorm(myn, mymu, lambda=mylbd)
mle.spnorm(myx, method=1)
mle.spnorm(myx, method=2)
mle.spnorm(myx, method=3)
myp   = 5
mylbd = stats::runif(1, min=0.0001, max=15)
myn   = 2000
mymu  = rnorm(myp)
mymu  = mymu/sqrt(sum(mymu^2))
myx   = RiemSphere::rspnorm(myn, mymu, lambda=mylbd)
mle.spnorm(myx, method=1)
mle.spnorm(myx, method=2)
mle.spnorm(myx, method=3)
myp   = 5
mylbd = stats::runif(1, min=0.0001, max=15)
myn   = 2000
mymu  = rnorm(myp)
mymu  = mymu/sqrt(sum(mymu^2))
myx   = RiemSphere::rspnorm(myn, mymu, lambda=mylbd)
mle.spnorm(myx, method=1)
mle.spnorm(myx, method=2)
mle.spnorm(myx, method=3)
library(ggplot2)
library(microbenchmark)  # time comparison of multiple methods
lbdtime <- microbenchmark(
deoptim = mle.spnorm(myx, method=1),
statopt = mle.spnorm(myx, method=2),
newton1 = mle.spnorm(myx, method=3), times=20L
)
autoplot(lbdtime)
library(RiemSphere)
myp   = 5
mylbd = stats::runif(1, min=0.0001, max=15)
myn   = 2000
mymu  = rnorm(myp)
mymu  = mymu/sqrt(sum(mymu^2))
myx   = RiemSphere::rspnorm(myn, mymu, lambda=mylbd)
mle.spnorm(myx, method=1)
mle.spnorm(myx, method=2)
mle.spnorm(myx, method=3)
library(ggplot2)
library(microbenchmark)  # time comparison of multiple methods
lbdtime <- microbenchmark(
deoptim = mle.spnorm(myx, method=1),
statopt = mle.spnorm(myx, method=2),
newton1 = mle.spnorm(myx, method=3), times=20L
)
autoplot(lbdtime)
autoplot(lbdtime)
graphics.off()
autoplot(lbdtime)
dev.off()
autoplot(lbdtime)
mle.spnorm(myx, method=1)
mle.spnorm(myx, method=2)
mle.spnorm(myx, method=3)
library(cluster)
help("silhouette")
data(ruspini)
pr4 <- pam(ruspini, 4)
pr4
help(pam)
help(ruspini)
# COMPARE THREE METHODS
myp   = 5
mylbd = stats::runif(1, min=0.0001, max=15)
myn   = 2000
mymu  = rnorm(myp)
mymu  = mymu/sqrt(sum(mymu^2))
myx   = RiemSphere::rspnorm(myn, mymu, lambda=mylbd)
mle.spnorm(myx, method=1)
mle.spnorm(myx, method=2)
mle.spnorm(myx, method=3)
library(ggplot2)
library(microbenchmark)  # time comparison of multiple methods
dev.off()
lbdtime <- microbenchmark(
deoptim = mle.spnorm(myx, method=1),
statopt = mle.spnorm(myx, method=2),
newton1 = mle.spnorm(myx, method=3), times=20L
)
autoplot(lbdtime)
library(RiemSphere)
# COMPARE THREE METHODS
myp   = 5
mylbd = stats::runif(1, min=0.0001, max=15)
myn   = 2000
mymu  = rnorm(myp)
mymu  = mymu/sqrt(sum(mymu^2))
myx   = RiemSphere::rspnorm(myn, mymu, lambda=mylbd)
mle.spnorm(myx, method=1)
mle.spnorm(myx, method=2)
mle.spnorm(myx, method=3)
library(ggplot2)
library(microbenchmark)  # time comparison of multiple methods
dev.off()
lbdtime <- microbenchmark(
deoptim = mle.spnorm(myx, method=1),
statopt = mle.spnorm(myx, method=2),
newton1 = mle.spnorm(myx, method=3), times=20L
)
autoplot(lbdtime)
library(RiemSphere)
x = c(0.01,0.015,0.02,0.025,0.03)
p.adjust(x, method="BH")
p.adjust(c(x, 0.055, 0.066, 0.077), method="BH")
help("p.adjust")
mytry <- function(ps){
ordps = order(ps)
ordered = sort(ps, decreasing = FALSE)
m = length(ordered)
ordout = ordered*(m/(1:m))
return(ordout[ordps])
}
mytry(c(x, 0.055, 0.066, 0.077))
mytry <- function(ps){
ordps = order(ps)
ordered = sort(ps, decreasing = FALSE)
m = length(ordered)
ordout = ordered*((1:m)/m)
return(ordout[ordps])
}
mytry(c(x, 0.055, 0.066, 0.077))
mytry <- function(ps){
ordps = order(ps)
ordered = sort(ps, decreasing = FALSE)
m = length(ordered)
ordout = ordered*(m/(1:m))
return(ordout[ordps])
}
y = c(x, 0.055, 0.066, 0.077)
p.adjust(mytry, method="BH")
p.adjust(y, method="BH")
mytry(y)
z = y(sample(1:length(y),length(y))
)
z = y[sample(1:length(y),length(y))]
p.adjust(z, method="BH")
mytry(z)
mytry <- function(ps){
ordps = order(ps)
ordered = sort(ps, decreasing = FALSE)
m = length(ordered)
ordout = ordered*(m/(1:m))
return(ordout[ordps])
}
mytry(z)
order(z)
z[order(z)]
zz = sort(z, decreasing = FALSE)
zz[order(z)]
z
help(order)
zz[rank(z)]
z
mytry <- function(ps){
ordps = rank(ps)
ordered = sort(ps, decreasing = FALSE)
m = length(ordered)
ordout = ordered*(m/(1:m))
return(ordout[ordps])
}
mytry(zz)
p.adjust(zz, method="BH")
ps = z
alpha = 0.05
ordps = rank(ps)
ordered = sort(ps, decreasing = FALSE)
m = length(ordered)
k = which.max(ordered <= ((1:m)/m)*alpha)
mytry2 <- function(ps){
alpha = 0.05
ordps = rank(ps)
ordered = sort(ps, decreasing = FALSE)
m = length(ordered)
k = which.max(ordered <= ((1:m)/m)*alpha)
ordout = ordered
ordout[1:k] = ordout[1:k]*(m/(1:k))
return(ordout[ordps])
}
p.adjust(zz, method="BH")
mytry(zz)
mytry2(zz)
mytry2 <- function(ps){
alpha = 0.05
ordps = rank(ps)
ordered = sort(ps, decreasing = FALSE)
m = length(ordered)
k = which.max(ordered <= ((1:m)/m)*alpha)
ordout = ordered
ordout[(k+1):m] = ordout[(k+1):m]*(m/((k+1):m))
return(ordout[ordps])
}
mytry2(zz)
alpha = 0.05
ordps = rank(ps)
ordered = sort(ps, decreasing = FALSE)
m = length(ordered)
k = which.max(ordered <= ((1:m)/m)*alpha)
k
k = which.max(ordered <= ((1:m)/m)*alpha)
ordout = ordered
ordout[1:k] = 0
ordout[ordps]
p.adjust(zz, method="BH")
ordout = ordered
ordout[(k+1):m] = 0
ordout[ordps]
alpha = 0.05
ordps = rank(ps)
ps = z
alpha = 0.05
ordps = rank(ps)
ordered = sort(ps, decreasing = FALSE)
m = length(ordered)
k = which.max(ordered <= ((1:m)/m)*alpha)
ordout = ordered
ordout[(k+1):m] = 0
ordout[ordps]
ordout = ordered
ordout[1:k] = 0
ordout[ordps]
plot(1:8, ordps)
plot(1:8, ordps, "l")
plot(1:8, ordps, "b")
plot(1:8, ordout[ordps], "b")
par(mfrow=c(1,2))
plot(1:8, ordout[ordps], "b")
plot(1:8, p.adjust(ps, method="BH"))
plot(1:8, p.adjust(ps, method="BH"), "b")
plot(1:8, p.adjust(ps, method="BH"), "b")
plot(1:8, ordout[ordps], "b")
plot(1:8, p.adjust(ps, method="BH"), "b")
plot(1:8, ordout[ordps], "b", ylim=c(0,0.08))
plot(1:8, p.adjust(ps, method="BH"), "b", ylim=c(0,0.08))
ordout[ordps]
install.packages(c("DEoptim","RiemBase"), dependencies = TRUE)
rm(list=ls())
library(RiemSphere)
devtools::document()
library(RiemSphere)
library(RiemSphere)
library(RiemSphere)
aux_log <- function(mu, x){
# theta = base::acos(sum(x*mu))
theta = tryCatch({base::acos(sum(x*mu))},
warning=function(w){
0
},error=function(e){
0
})
if (abs(theta)<10*(.Machine$double.eps)){
output = x-mu*(sum(x*mu))
} else {
output = (x-mu*(sum(x*mu)))*theta/sin(theta)
}
return(output)
}
x = Directional::rvmf(2, c(1,0,0), 2)
x1 = as.vector(x[1,])
x2 = as.vector(x[2,])
sqrt(sum(aux_log(x1,x2)^2))
acos(sum(x1*x2))
1-sum(x1*x2)/(sqrt(sum(x1^2))*sqrt(sum(x2^2)))
sum(x1*x2)/(sqrt(sum(x1^2))*sqrt(sum(x2^2)))
library(skmenas)
library(skmeans)
??skmeans
help(skmeans)
acos(sum(x1*x2))
1-sum(x1*x2)
library(RiemSphere)
library(RiemSphere)
library(RiemSphere)
help(besselI)
library(RiemSphere)
besselI(5, 3)
besselI(5, 3, expon.scaled = TRUE)
library(RiemSphere)
library(RiemSphere)
library(RiemSphere)
library(Directional)
help("rayleigh")
help(pchisq)
library(RiemSphere)
mymu = rnorm(6); mymu = mymu/sqrt(sum(mymu^2))
x = rvmf(100, mymu, 0)
library(RiemSphere)
testunif.Rayleigh(x)
rayleigh(x)
help(rayleigh)
rayleigh(x, modif=FALSE)
rayleigh(x, modif=FALSE, B=1)
library(RiemSphere)
rayleigh(x, modif=FALSE, B=1)
testunif.Rayleigh(x)
help(gamma)
help(solve)
help(uniroot)
help(gamma)
help(pnorm)
pnorm(0)
pnorm(1)
library(RiemSphere)
rayleigh(x, modif=FALSE, B=1)
testunif.Rayleigh(x)
testunif.Rayleigh(x, method="modified")
testunif.Rayleigh(x, method="saddlepoint")
library(RiemSphere)
testunif.Rayleigh(x, method="saddlepoint")
library(RiemSphere)
testunif.Rayleigh(x, method="saddlepoint")
help(vmf)
vmf(x)
library(RiemSphere)
testunif.Rayleigh(x, method="saddlepoint")
testunif.Rayleigh(x, method="saddlepoint")
library(RiemSphere)
testunif.Rayleigh(x, method="saddlepoint")
library(RiemSphere)
testunif.Rayleigh(x, method="saddlepoint")
testunif.Rayleigh(x)
library(RiemSphere)
library(RiemSphere)
testunif.Rayleigh(x, method="saddlepoint")
testunif.Rayleigh(x, method="modified")
library(SHT)
library(RiemSphere)
library(RiemSphere)
testunif.Rayleigh(x, method="Original")
library(RiemSphere)
library(RiemSphere)
install.packages("hypergeo")
library(RiemSphere)
library(RiemSphere)
library(RiemSphere)
help(integrate)
# test 1. besselI and integration -----------------------------------------
p = 3
vec.kap = seq(from=0.01,to=20,length.out=100)
res1 = rep(0,100) # besselI function
res2 = rep(0,100) # manual integration
for (i in 1:100){
kappa = vec.kap[i]
myfun <- function(t){
return((t^2)*exp(kappa*t)*((1-(t^2))^((p-3)/2)))
}
res2[i] = stats::integrate(myfun, lower=-1, upper=1)$value
res1[i] = besselI(kappa, p/3)
}
res1
res2
plot(1:100, res1, col="red", lwd=2, "b")
points(1:100, res2, col="blue", "b")
library(RiemSphere)
library(Directional)
help("vmf")
library(movMF)
install.packages("movMF")
library(movMF)
help("movMF")
help(vmf)
help(rvmf)
m <- rnorm(4)
m <- m/sqrt(sum(m^2))
x <- rvmf(1000, m, 25)
movMF(x, 1)
help(movMF)
movMF(x, 1, kappa="uniroot")
kap.uni = movMF(x, 1, kappa="uniroot")
kap.uni$details
kap.uni = movMF(x, 1, kappa="Banerjee_et_al_2005")
kap.uni$theta
print(kap.uni)
kap.uni$]
kap.uni$alpha
kap.uni$L
kap.uni$P
kap.uni$ll
kap.uni$details
