c3 = 24.01409824083091
c4 = 1.231739572450155
c5 = 1.208650973866179*(1e-3)
c6 = -5.395239384953*(1e-6)
t1 = c0 + c1/(s+1) + c2/(s+2) + c3/(s+3) + c4/(s+4) + c5/(s+5) + c6/(s+6)
t2 = (s+0.5)*log(s+5.5) - (s+5.5)
t1 = s*log(0.5*x) - 0.5*log(2*pi) - t2 - log(t1)
R = 1.0
M = 1.0
k = 1
epsthr  = 1e-6
epserr.bessel  = 1000
maxiter = 500
citer   = 1
x2      = (x^2)
while (epserr.bessel > epsthr){
citer = citer + 1
R = R*(0.25*(x2))/((s+k)*k)
M = M + R
epserr.bessel = R/M
k = (k+1)
citer = citer + 1
if (citer > maxiter){
break
}
}
output = t1 + log(M)
if (log==FALSE){
output = exp(output)
}
return(output)
}
# 13. aux_ for von-Mises  -------------------------------------------------
#' @keywords internal
#' @noRd
aux_vmf_Apk <- function(p, kappa){
if (kappa > 100){
output = tryCatch(
{exp(besselIasym(kappa, p/2, log=TRUE) - besselIasym(kappa, (p/2)-1, log=TRUE))},
error   <- exp(aux_besselI(kappa, p/2)-aux_besselI(kappa, (p/2)-1)),
warning <- exp(aux_besselI(kappa, p/2)-aux_besselI(kappa, (p/2)-1))
)
} else if (p > 100){
output = tryCatch({
exp(besselI.nuAsym(kappa, p/2, 5, log=TRUE)-besselI.nuAsym(kappa, (p/2)-1, 5, log=TRUE))
}, error <- function(cond){
exp(aux_besselI(kappa, p/2)-aux_besselI(kappa, (p/2)-1))
}, warning <- function(){
exp(aux_besselI(kappa, p/2)-aux_besselI(kappa, (p/2)-1))
})
}
return(output)
}
aux_vmf_Apk(10,100)
output = tryCatch(
{exp(besselIasym(kappa, p/2, log=TRUE) - besselIasym(kappa, (p/2)-1, log=TRUE))},
error   <- exp(aux_besselI(kappa, p/2)-aux_besselI(kappa, (p/2)-1)),
warning <- exp(aux_besselI(kappa, p/2)-aux_besselI(kappa, (p/2)-1))
)
p = 10
kappa = 42
output = tryCatch(
{exp(besselIasym(kappa, p/2, log=TRUE) - besselIasym(kappa, (p/2)-1, log=TRUE))},
error   <- exp(aux_besselI(kappa, p/2)-aux_besselI(kappa, (p/2)-1)),
warning <- exp(aux_besselI(kappa, p/2)-aux_besselI(kappa, (p/2)-1))
)
output = tryCatch({
exp(besselIasym(kappa, p/2, log=TRUE) - besselIasym(kappa, (p/2)-1, log=TRUE))},
error   <- exp(aux_besselI(kappa, p/2)-aux_besselI(kappa, (p/2)-1)),
warning <- exp(aux_besselI(kappa, p/2)-aux_besselI(kappa, (p/2)-1))
)
output = tryCatch({
exp(besselIasym(kappa, p/2, log=TRUE) - besselIasym(kappa, (p/2)-1, log=TRUE))},
error   <- function(e){
return(exp(aux_besselI(kappa, p/2)-aux_besselI(kappa, (p/2)-1)))},
warning <- function(w){
return(exp(aux_besselI(kappa, p/2)-aux_besselI(kappa, (p/2)-1)))}
)
output = tryCatch({
exp(besselIasym(kappa, p/2, log=TRUE) - besselIasym(kappa, (p/2)-1, log=TRUE))
}, error   <- function(e){
return(exp(aux_besselI(kappa, p/2)-aux_besselI(kappa, (p/2)-1)))
}, warning <- function(w){
return(exp(aux_besselI(kappa, p/2)-aux_besselI(kappa, (p/2)-1)))}
)
tryCatch({
output = exp(besselIasym(kappa, p/2, log=TRUE) - besselIasym(kappa, (p/2)-1, log=TRUE))
}, error <- function(e){
output = exp(aux_besselI(kappa, p/2)-aux_besselI(kappa, (p/2)-1))
}, warning <- function(w){
output <- exp(aux_besselI(kappa, p/2)-aux_besselI(kappa, (p/2)-1))
})
output = tryCatch({
exp(besselIasym(kappa, p/2, log=TRUE) - besselIasym(kappa, (p/2)-1, log=TRUE))
}, error <- function(e){
exp(aux_besselI(kappa, p/2)-aux_besselI(kappa, (p/2)-1))
}, warning <- function(w){
exp(aux_besselI(kappa, p/2)-aux_besselI(kappa, (p/2)-1))
})
1/0
matrix(rnorm(25),nrow=5)/matrix(rnorm(16),nrow=4)
output = tryCatch({matrix(rnorm(25),nrow=5)/matrix(rnorm(16),nrow=4)},
error <- function(e){
1
})
output = tryCatch({
matrix(rnorm(25),nrow=5)/matrix(rnorm(16),nrow=4)
}, error <- function(e){1})
output = tryCatch(
matrix(rnorm(25),nrow=5)/matrix(rnorm(16),nrow=4),
error <- function(e){1})
library(Bessel)
output = tryCatch(
matrix(rnorm(25),nrow=5)/matrix(rnorm(16),nrow=4),
error <- function(e){1})
output = tryCatch(
matrix(rnorm(25),nrow=5)/matrix(rnorm(16),nrow=4),
error = function(e){1})
output
output = tryCatch({
exp(besselIasym(kappa, p/2, log=TRUE) - besselIasym(kappa, (p/2)-1, log=TRUE))
}, error = function(e){
exp(aux_besselI(kappa, p/2)-aux_besselI(kappa, (p/2)-1))
}, warning = function(w){
exp(aux_besselI(kappa, p/2)-aux_besselI(kappa, (p/2)-1))
})
output
library(RiemSphere)
library(RiemSphere)
## simply test
x = rvmf(50, c(1,rep(0,7)), 10)
mle.vmf(x, method="banerjee")
mle.vmf(x, method="song")
mle.vmf(x, method="sra")
mle.vmf(x, method="tanabe")
mle.vmf(x, method="uniroot")
mle.vmf(x, method="nmarg1")
mle.vmf(x, method="nmarg2")
mle.vmf(x, method="banerjee")
mle.vmf(x, method="song")
mle.vmf(x, method="sra")
mle.vmf(x, method="tanabe")
mle.vmf(x, method="uniroot")
mle.vmf(x, method="nmarg1")
## simply test
x = rvmf(50, c(1,rep(0,7)), 10)
mle.vmf(x, method="banerjee")
mle.vmf(x, method="song")
mle.vmf(x, method="sra")
mle.vmf(x, method="tanabe")
mle.vmf(x, method="uniroot")
mle.vmf(x, method="nmarg1")
mle.vmf(x, method="nmarg2")
library(RiemSphere)
## simply test
x = rvmf(50, c(1,rep(0,7)), 10)
mle.vmf(x, method="banerjee")
mle.vmf(x, method="song")
mle.vmf(x, method="sra")
mle.vmf(x, method="tanabe")
mle.vmf(x, method="uniroot")
mle.vmf(x, method="nmarg1")
mle.vmf(x, method="nmarg2")
mle.vmf(x, method="banerjee")
mle.vmf(x, method="song")
## simply test
x = rvmf(500, c(1,rep(0,7)), 10)
mle.vmf(x, method="banerjee")
mle.vmf(x, method="song")
mle.vmf(x, method="sra")
mle.vmf(x, method="tanabe")
mle.vmf(x, method="uniroot")
mle.vmf(x, method="nmarg1")
mle.vmf(x, method="nmarg2")
mle.vmf(x, method="banerjee")
mle.vmf(x, method="song")
mle.vmf(x, method="sra")
mle.vmf(x, method="tanabe")
mle.vmf(x, method="uniroot")
mle.vmf(x, method="nmarg1")
mle.vmf(x, method="nmarg2")
mle.vfm(x, method="me1")
mle.vmf(x, method="me1")
library(RiemSphere)
mle.vmf(x, method="me1")
mle.vmf(x, method="me1")
library(RiemSphere)
mle.vmf(x, method="banerjee")
mle.vmf(x, method="song")
mle.vmf(x, method="sra")
mle.vmf(x, method="tanabe")
mle.vmf(x, method="uniroot")
mle.vmf(x, method="nmarg1")
mle.vmf(x, method="nmarg2")
mle.vmf(x, method="me1")
mle.vmf(x, method="me2")
library(RiemSphere)
sqrt(sqrt(.Machine$double.eps))
sqrt(sqrt(sqrt(.Machine$double.eps)))
library(RiemSphere)
## simply test
x = rvmf(500, c(1,rep(0,7)), 10)
mle.vmf(x, method="banerjee")
mle.vmf(x, method="song")
mle.vmf(x, method="sra")
mle.vmf(x, method="tanabe")
mle.vmf(x, method="uniroot")
mle.vmf(x, method="nmarg1")
mle.vmf(x, method="nmarg2")
mle.vmf(x, method="me1")
mle.vmf(x, method="me2")
mle.vmf(x, method="nmle1")
mle.vmf(x, method="nmle2")
library(RiemSphere)
mle.vmf(x, method="nmle1")
mle.vmf(x, method="nmle2")
library(RiemSphere)
# example
mymu = rnorm(4)
mymu = mymu/sqrt(sum(mymu^2))
myx  = RiemSphere::rvmf(100, mymu, kappa=1)
spmean1.lrt(myx, mymu, kappa0=NULL)
spmean1.lrt(myx, mymu, kappa0=1)
# example
mymu = rnorm(4)
mymu = mymu/sqrt(sum(mymu^2))
myx  = RiemSphere::rvmf(100, mymu, kappa=1)
spmean1.lrt(myx, mymu, kappa0=NULL)
spmean1.lrt(myx, mymu, kappa0=1)
library(RiemSphere)
library(RiemSphere)
library(RiemSphere)
library(RiemSphere)
# example
mymu = rnorm(4)
mymu = mymu/sqrt(sum(mymu^2))
myx  = RiemSphere::rvmf(100, mymu, kappa=1)
spmean1.lrt(myx, mymu, kappa0=NULL)
spmean1.lrt(myx, mymu, kappa0=1)
# example
mymu = rnorm(4)
mymu = mymu/sqrt(sum(mymu^2))
myx  = RiemSphere::rvmf(100, mymu, kappa=1)
spmean1.lrt(myx, mymu, kappa0=NULL)
spmean1.lrt(myx, mymu, kappa0=1)
# example
mymu = rnorm(4)
mymu = mymu/sqrt(sum(mymu^2))
myx  = RiemSphere::rvmf(100, mymu, kappa=1)
spmean1.lrt(myx, mymu, kappa0=NULL)
spmean1.lrt(myx, mymu, kappa0=1)
# example
mymu = rnorm(4)
mymu = mymu/sqrt(sum(mymu^2))
myx  = RiemSphere::rvmf(100, mymu, kappa=1)
spmean1.lrt(myx, mymu, kappa0=NULL)
spmean1.lrt(myx, mymu, kappa0=1)
# example
mymu = rnorm(4)
mymu = mymu/sqrt(sum(mymu^2))
myx  = RiemSphere::rvmf(100, mymu, kappa=1)
spmean1.lrt(myx, mymu, kappa0=NULL)
spmean1.lrt(myx, mymu, kappa0=1)
# example
mymu = rnorm(4)
mymu = mymu/sqrt(sum(mymu^2))
myx  = RiemSphere::rvmf(100, mymu, kappa=1)
spmean1.lrt(myx, mymu, kappa0=NULL)
spmean1.lrt(myx, mymu, kappa0=1)
library(RiemSphere)
library(RiemSphere)
library(RiemSphere)
diag(5)
help(outer)
library(RiemSphere)
# example
mymu = rnorm(4)
mymu = mymu/sqrt(sum(mymu^2))
myx  = RiemSphere::rvmf(100, mymu, kappa=1)
spmean1.lrt(myx, mymu, kappa0=NULL)
spmean1.lrt(myx, mymu, kappa0=1)
library(RiemSphere)
# example
mymu = rnorm(4)
mymu = mymu/sqrt(sum(mymu^2))
myx  = RiemSphere::rvmf(100, mymu, kappa=1)
spmean1.lrt(myx, mymu, kappa0=NULL)
spmean1.lrt(myx, mymu, kappa0=1)
# example
mymu = rnorm(4)
mymu = mymu/sqrt(sum(mymu^2))
myx  = RiemSphere::rvmf(100, mymu, kappa=1)
spmean1.lrt(myx, mymu, kappa0=NULL)
spmean1.lrt(myx, mymu, kappa0=1)
# example
mymu = rnorm(4)
mymu = mymu/sqrt(sum(mymu^2))
myx  = RiemSphere::rvmf(100, mymu, kappa=1)
spmean1.lrt(myx, mymu, kappa0=NULL)
spmean1.lrt(myx, mymu, kappa0=1)
spmean1.lrt(myx, mymu, kappa0=NULL)
library(RiemSphere)
spmean1.lrt(myx, mymu, kappa0=NULL)
# example
mymu = rnorm(4)
mymu = mymu/sqrt(sum(mymu^2))
myx  = RiemSphere::rvmf(100, mymu, kappa=1)
spmean1.score(myx, mymu, kappa0=NULL)
spmean1.score(myx, mymu, kappa0=1)
library(RiemSphere)
# example
mymu = rnorm(4)
mymu = mymu/sqrt(sum(mymu^2))
myx  = RiemSphere::rvmf(100, mymu, kappa=1)
spmean1.score(myx, mymu, kappa0=NULL)
spmean1.score(myx, mymu, kappa0=1)
# example
mymu = rnorm(4)
mymu = mymu/sqrt(sum(mymu^2))
myx  = RiemSphere::rvmf(100, mymu, kappa=1)
spmean1.score(myx, mymu, kappa0=NULL)
spmean1.score(myx, mymu, kappa0=1)
library(RiemSphere)
library(RiemSphere)
help(gamma)
library(RiemSphere)
# COMPARE THREE METHODS
myp   = 5
mylbd = stats::runif(1, min=0.0001, max=15)
myn   = 2000
mymu  = rnorm(myp)
mymu  = mymu/sqrt(sum(mymu^2))
myx   = RiemSphere::rspnorm(myn, mymu, lambda=mylbd)
mle.spnorm(myx, method="newton")
mle.spnorm(myx, method="halley")
mle.spnorm(myx, method="optimize")
mylbd
library(RiemSphere)
library(ggplot2)
library(microbenchmark)  # time comparison of multiple methods
dev.off()
lbdtime <- microbenchmark(
newton = mle.spnorm(myx, method="newton"),
halley = mle.spnorm(myx, method="halley"),
Roptim = mle.spnorm(myx, method="optimize"), times=10L
)
autoplot(lbdtime)
# TESTER FOR MLE ESTIMATION -----------------------------------------------
myp   = 5
mylbd = stats::runif(1, min=0.0001, max=15)
myn   = 2000
aux_log <- function(mu, x){
theta = base::acos(sum(x*mu))
if (abs(theta)<sqrt(.Machine$double.eps)){
output = x-mu*(sum(x*mu))
} else {
output = (x-mu*(sum(x*mu)))*theta/sin(theta)
}
return(output)
}
check_single <- function(x){
return(sum(x^2))
}
aux_dist_1toN <- function(x, maty){
dist_one <- function(y){
logxy = aux_log(x, y)
return(sqrt(sum(logxy^2)))
}
return(apply(maty, 1, dist_one))
}
library(RiemBase)
mymu  = rnorm(myp)
mymu  = mymu/sqrt(sum(mymu^2))
myx   = RiemSphere::rspnorm(myn, mymu, lambda=mylbd)
mymean = as.vector(rbase.mean(riemfactory(t(myx), name="sphere"))$x)
dspnorm.constant <- function(lbd, D){ # lbd : lambda / D : dimension
myfunc <- function(r){
return(exp(-lbd*(r^2)/2)*((sin(r))^(D-2)))
}
t1 = 2*(pi^((D-1)/2))/gamma((D-1)/2) # one possible source of error
t2 = stats::integrate(myfunc, lower=0, upper=pi, rel.tol=sqrt(.Machine$double.eps))$value
return(t1*t2)
}
C = sum(aux_dist_1toN(mymean, myx)^2)
D = ncol(myx)
n = nrow(myx)
# test 1. shape of log-likelihood function --------------------------------
vec.lambda = seq(from=0,to=20,length.out=200)
vec.cost   = rep(0,length(vec.lambda))
for (i in 1:length(vec.lambda)){
tl = vec.lambda[i]
term1 = -(tl/2)*C
term2 = -n*log(dspnorm.constant(tl,D))
vec.cost[i] = term1+term2
}
lopt = vec.lambda[which.max(vec.cost)]
hey = mle.spnorm(myx)
plot(vec.lambda, vec.cost, main="red-MLE, blue-TRUE")
abline(v=hey$method3, lwd=2, col="red")
abline(v=mylbd, lwd=2, col="blue")
# test 2. time comparison for concentration estimation algorithms ---------
x11()
library(ggplot2)
library(microbenchmark)  # time comparison of multiple methods
lbdtime <- microbenchmark(
deoptim = mle.spnorm(myx, method=1),
statopt = mle.spnorm(myx, method=2),
newton1 = mle.spnorm(myx, method=3),
newton2 = mle.spnorm(myx, method=4), times=20L
)
autoplot(lbdtime)
# test 3. estimation over iterations --------------------------------------
rec.dir <- rep(0,myn-1)
rec.lbd <- rep(0,myn-1)
for (i in 1:(myn-1)){
tgtmle = mle.spnorm(myx[1:(i+1),])
tgt.mean = tgtmle$mu
tgt.lbd  = tgtmle$lambda
rec.dir[i] = sqrt(sum((mymu-tgt.mean)^2))
rec.lbd[i] = tgt.lbd
print(paste("iteration ",i," complete..",sep=""))
}
graphics.off()
# test 1. shape of log-likelihood function --------------------------------
vec.lambda = seq(from=0,to=20,length.out=200)
vec.cost   = rep(0,length(vec.lambda))
for (i in 1:length(vec.lambda)){
tl = vec.lambda[i]
term1 = -(tl/2)*C
term2 = -n*log(dspnorm.constant(tl,D))
vec.cost[i] = term1+term2
}
lopt = vec.lambda[which.max(vec.cost)]
hey = mle.spnorm(myx)
plot(vec.lambda, vec.cost, main="red-MLE, blue-TRUE")
abline(v=hey$method3, lwd=2, col="red")
abline(v=mylbd, lwd=2, col="blue")
# test 2. time comparison for concentration estimation algorithms ---------
x11()
library(ggplot2)
library(microbenchmark)  # time comparison of multiple methods
lbdtime <- microbenchmark(
deoptim = mle.spnorm(myx, method="Newton"),
statopt = mle.spnorm(myx, method="Halley"),
newton1 = mle.spnorm(myx, method="Optimize"), times=20L
)
autoplot(lbdtime)
graphics.off()
autoplot(lbdtime)
rec.dir <- rep(0,myn-1)
rec.lbd <- rep(0,myn-1)
for (i in 1:(myn-1)){
tgtmle = mle.spnorm(myx[1:(i+1),])
tgt.mean = tgtmle$mu
tgt.lbd  = tgtmle$lambda
rec.dir[i] = sqrt(sum((mymu-tgt.mean)^2))
rec.lbd[i] = tgt.lbd
print(paste("iteration ",i," complete..",sep=""))
}
selectid = round(seq(from=2,to=myn,length.out=100))-1
xid      = 2:myn
x11()
par(mfrow=c(1,2))
plot(xid[selectid], rec.dir[selectid], "b", cex=0.5, main="evolution : mean direction")
abline(h=0, col="blue", lwd=2)
plot(xid[selectid], rec.lbd[selectid], "b", cex=0.5, main="evolution : concentration")
abline(h=mylbd, col="red", lwd=1.5)
help(mix.vmf)
library(Directional)
help("mix.vmf")
k <- runif(4, 4, 20)
prob <- c(0.2, 0.4, 0.3, 0.1)
mu <- matrix(rnorm(16), ncol = 4)
mu <- mu / sqrt( rowSums(mu^2) )
x <- rmixvmf(200, prob, mu, k)$x
mix.vmf(x, 3)
mix.vmf(x, 4)
mix.vmf(x, 5)
library(RiemSphere)
library(RiemSphere)
spclust.vmfk <- runif(4, 4, 20)
prob <- c(0.2, 0.4, 0.3, 0.1)
mu <- matrix(rnorm(16), ncol = 4)
mu <- mu / sqrt( rowSums(mu^2) )
x <- rmixvmf(200, prob, mu, k)$x
tmp = mix.vmf(x, 3)
tmp$param
library(RiemSphere)
devtools::document()
library(RiemSphere)
library(RiemBase)
help(rbase.pdist)
help(Directional)
help(rbase.pdist2)
library(RiemSphere)
library(RiemSphere)
library(RiemRS)
help(rs.mean)
library(RiemBaseExt)
help("rclust.dbscan")
library(RiemSphere)
help("rbase.pdist")
library(RiemSphere)
library(RiemSphere)
devtools::document()
install.packages("Directional", dependencies = TRUE)
devtools::document()
install.packages("Directional", dependencies = TRUE)
devtools::document()
devtools::document()
devtools::document()
library(RiemSphere)
