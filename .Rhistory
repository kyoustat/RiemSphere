mle.spnorm(myx, method=2)
mle.spnorm(myx, method=3)
library(ggplot2)
library(microbenchmark)  # time comparison of multiple methods
lbdtime <- microbenchmark(
deoptim = mle.spnorm(myx, method=1),
statopt = mle.spnorm(myx, method=2),
newton1 = mle.spnorm(myx, method=3), times=20L
)
autoplot(lbdtime)
autoplot(lbdtime)
graphics.off()
autoplot(lbdtime)
dev.off()
autoplot(lbdtime)
mle.spnorm(myx, method=1)
mle.spnorm(myx, method=2)
mle.spnorm(myx, method=3)
library(cluster)
help("silhouette")
data(ruspini)
pr4 <- pam(ruspini, 4)
pr4
help(pam)
help(ruspini)
# COMPARE THREE METHODS
myp   = 5
mylbd = stats::runif(1, min=0.0001, max=15)
myn   = 2000
mymu  = rnorm(myp)
mymu  = mymu/sqrt(sum(mymu^2))
myx   = RiemSphere::rspnorm(myn, mymu, lambda=mylbd)
mle.spnorm(myx, method=1)
mle.spnorm(myx, method=2)
mle.spnorm(myx, method=3)
library(ggplot2)
library(microbenchmark)  # time comparison of multiple methods
dev.off()
lbdtime <- microbenchmark(
deoptim = mle.spnorm(myx, method=1),
statopt = mle.spnorm(myx, method=2),
newton1 = mle.spnorm(myx, method=3), times=20L
)
autoplot(lbdtime)
library(RiemSphere)
# COMPARE THREE METHODS
myp   = 5
mylbd = stats::runif(1, min=0.0001, max=15)
myn   = 2000
mymu  = rnorm(myp)
mymu  = mymu/sqrt(sum(mymu^2))
myx   = RiemSphere::rspnorm(myn, mymu, lambda=mylbd)
mle.spnorm(myx, method=1)
mle.spnorm(myx, method=2)
mle.spnorm(myx, method=3)
library(ggplot2)
library(microbenchmark)  # time comparison of multiple methods
dev.off()
lbdtime <- microbenchmark(
deoptim = mle.spnorm(myx, method=1),
statopt = mle.spnorm(myx, method=2),
newton1 = mle.spnorm(myx, method=3), times=20L
)
autoplot(lbdtime)
library(RiemSphere)
x = c(0.01,0.015,0.02,0.025,0.03)
p.adjust(x, method="BH")
p.adjust(c(x, 0.055, 0.066, 0.077), method="BH")
help("p.adjust")
mytry <- function(ps){
ordps = order(ps)
ordered = sort(ps, decreasing = FALSE)
m = length(ordered)
ordout = ordered*(m/(1:m))
return(ordout[ordps])
}
mytry(c(x, 0.055, 0.066, 0.077))
mytry <- function(ps){
ordps = order(ps)
ordered = sort(ps, decreasing = FALSE)
m = length(ordered)
ordout = ordered*((1:m)/m)
return(ordout[ordps])
}
mytry(c(x, 0.055, 0.066, 0.077))
mytry <- function(ps){
ordps = order(ps)
ordered = sort(ps, decreasing = FALSE)
m = length(ordered)
ordout = ordered*(m/(1:m))
return(ordout[ordps])
}
y = c(x, 0.055, 0.066, 0.077)
p.adjust(mytry, method="BH")
p.adjust(y, method="BH")
mytry(y)
z = y(sample(1:length(y),length(y))
)
z = y[sample(1:length(y),length(y))]
p.adjust(z, method="BH")
mytry(z)
mytry <- function(ps){
ordps = order(ps)
ordered = sort(ps, decreasing = FALSE)
m = length(ordered)
ordout = ordered*(m/(1:m))
return(ordout[ordps])
}
mytry(z)
order(z)
z[order(z)]
zz = sort(z, decreasing = FALSE)
zz[order(z)]
z
help(order)
zz[rank(z)]
z
mytry <- function(ps){
ordps = rank(ps)
ordered = sort(ps, decreasing = FALSE)
m = length(ordered)
ordout = ordered*(m/(1:m))
return(ordout[ordps])
}
mytry(zz)
p.adjust(zz, method="BH")
ps = z
alpha = 0.05
ordps = rank(ps)
ordered = sort(ps, decreasing = FALSE)
m = length(ordered)
k = which.max(ordered <= ((1:m)/m)*alpha)
mytry2 <- function(ps){
alpha = 0.05
ordps = rank(ps)
ordered = sort(ps, decreasing = FALSE)
m = length(ordered)
k = which.max(ordered <= ((1:m)/m)*alpha)
ordout = ordered
ordout[1:k] = ordout[1:k]*(m/(1:k))
return(ordout[ordps])
}
p.adjust(zz, method="BH")
mytry(zz)
mytry2(zz)
mytry2 <- function(ps){
alpha = 0.05
ordps = rank(ps)
ordered = sort(ps, decreasing = FALSE)
m = length(ordered)
k = which.max(ordered <= ((1:m)/m)*alpha)
ordout = ordered
ordout[(k+1):m] = ordout[(k+1):m]*(m/((k+1):m))
return(ordout[ordps])
}
mytry2(zz)
alpha = 0.05
ordps = rank(ps)
ordered = sort(ps, decreasing = FALSE)
m = length(ordered)
k = which.max(ordered <= ((1:m)/m)*alpha)
k
k = which.max(ordered <= ((1:m)/m)*alpha)
ordout = ordered
ordout[1:k] = 0
ordout[ordps]
p.adjust(zz, method="BH")
ordout = ordered
ordout[(k+1):m] = 0
ordout[ordps]
alpha = 0.05
ordps = rank(ps)
ps = z
alpha = 0.05
ordps = rank(ps)
ordered = sort(ps, decreasing = FALSE)
m = length(ordered)
k = which.max(ordered <= ((1:m)/m)*alpha)
ordout = ordered
ordout[(k+1):m] = 0
ordout[ordps]
ordout = ordered
ordout[1:k] = 0
ordout[ordps]
plot(1:8, ordps)
plot(1:8, ordps, "l")
plot(1:8, ordps, "b")
plot(1:8, ordout[ordps], "b")
par(mfrow=c(1,2))
plot(1:8, ordout[ordps], "b")
plot(1:8, p.adjust(ps, method="BH"))
plot(1:8, p.adjust(ps, method="BH"), "b")
plot(1:8, p.adjust(ps, method="BH"), "b")
plot(1:8, ordout[ordps], "b")
plot(1:8, p.adjust(ps, method="BH"), "b")
plot(1:8, ordout[ordps], "b", ylim=c(0,0.08))
plot(1:8, p.adjust(ps, method="BH"), "b", ylim=c(0,0.08))
ordout[ordps]
install.packages(c("DEoptim","RiemBase"), dependencies = TRUE)
rm(list=ls())
library(RiemSphere)
devtools::document()
library(RiemSphere)
library(RiemSphere)
library(RiemSphere)
aux_log <- function(mu, x){
# theta = base::acos(sum(x*mu))
theta = tryCatch({base::acos(sum(x*mu))},
warning=function(w){
0
},error=function(e){
0
})
if (abs(theta)<10*(.Machine$double.eps)){
output = x-mu*(sum(x*mu))
} else {
output = (x-mu*(sum(x*mu)))*theta/sin(theta)
}
return(output)
}
x = Directional::rvmf(2, c(1,0,0), 2)
x1 = as.vector(x[1,])
x2 = as.vector(x[2,])
sqrt(sum(aux_log(x1,x2)^2))
acos(sum(x1*x2))
1-sum(x1*x2)/(sqrt(sum(x1^2))*sqrt(sum(x2^2)))
sum(x1*x2)/(sqrt(sum(x1^2))*sqrt(sum(x2^2)))
library(skmenas)
library(skmeans)
??skmeans
help(skmeans)
acos(sum(x1*x2))
1-sum(x1*x2)
library(RiemSphere)
library(RiemSphere)
library(RiemSphere)
help(besselI)
library(RiemSphere)
besselI(5, 3)
besselI(5, 3, expon.scaled = TRUE)
library(RiemSphere)
library(RiemSphere)
library(RiemSphere)
library(Directional)
help("rayleigh")
help(pchisq)
library(RiemSphere)
mymu = rnorm(6); mymu = mymu/sqrt(sum(mymu^2))
x = rvmf(100, mymu, 0)
library(RiemSphere)
testunif.Rayleigh(x)
rayleigh(x)
help(rayleigh)
rayleigh(x, modif=FALSE)
rayleigh(x, modif=FALSE, B=1)
library(RiemSphere)
rayleigh(x, modif=FALSE, B=1)
testunif.Rayleigh(x)
help(gamma)
help(solve)
help(uniroot)
help(gamma)
help(pnorm)
pnorm(0)
pnorm(1)
library(RiemSphere)
rayleigh(x, modif=FALSE, B=1)
testunif.Rayleigh(x)
testunif.Rayleigh(x, method="modified")
testunif.Rayleigh(x, method="saddlepoint")
library(RiemSphere)
testunif.Rayleigh(x, method="saddlepoint")
library(RiemSphere)
testunif.Rayleigh(x, method="saddlepoint")
help(vmf)
vmf(x)
library(RiemSphere)
testunif.Rayleigh(x, method="saddlepoint")
testunif.Rayleigh(x, method="saddlepoint")
library(RiemSphere)
testunif.Rayleigh(x, method="saddlepoint")
library(RiemSphere)
testunif.Rayleigh(x, method="saddlepoint")
testunif.Rayleigh(x)
library(RiemSphere)
library(RiemSphere)
testunif.Rayleigh(x, method="saddlepoint")
testunif.Rayleigh(x, method="modified")
library(SHT)
library(RiemSphere)
library(RiemSphere)
testunif.Rayleigh(x, method="Original")
library(RiemSphere)
library(RiemSphere)
install.packages("hypergeo")
library(RiemSphere)
library(RiemSphere)
library(RiemSphere)
help(integrate)
# test 1. besselI and integration -----------------------------------------
p = 3
vec.kap = seq(from=0.01,to=20,length.out=100)
res1 = rep(0,100) # besselI function
res2 = rep(0,100) # manual integration
for (i in 1:100){
kappa = vec.kap[i]
myfun <- function(t){
return((t^2)*exp(kappa*t)*((1-(t^2))^((p-3)/2)))
}
res2[i] = stats::integrate(myfun, lower=-1, upper=1)$value
res1[i] = besselI(kappa, p/3)
}
res1
res2
plot(1:100, res1, col="red", lwd=2, "b")
points(1:100, res2, col="blue", "b")
library(RiemSphere)
library(Directional)
help("vmf")
library(movMF)
install.packages("movMF")
library(movMF)
help("movMF")
help(vmf)
help(rvmf)
m <- rnorm(4)
m <- m/sqrt(sum(m^2))
x <- rvmf(1000, m, 25)
movMF(x, 1)
help(movMF)
movMF(x, 1, kappa="uniroot")
kap.uni = movMF(x, 1, kappa="uniroot")
kap.uni$details
kap.uni = movMF(x, 1, kappa="Banerjee_et_al_2005")
kap.uni$theta
print(kap.uni)
kap.uni$]
kap.uni$alpha
kap.uni$L
kap.uni$P
kap.uni$ll
kap.uni$details
library(Bessel)
besselI.nuAsym()
help("besselI.nuAsym")
help("besselIasym")
library(RiemSphere)
help(besselI)
help("besselI.nuAsym")
library(RiemSphere)
library(RiemSphere)
aux_vmf_Apk(100,100)
library(RiemSphere)
library(RiemSphere)
library(RiemSphere)
help("uniroot")
library(RiemSphere)
x = rvmf(25, c(0,0,1))
x = rvmf(25, c(0,0,1), kappa = 10)
mle.vmf(x)
library(RiemSphere)
mle.vmf(x)
mle.vmf(x, method="sra")
mle.vmf(x, method="uniroot")
library(RiemSphere)
mle.vmf(x, method="sra")
mle.vmf(x, method="uniroot")
mle.vmf(x, method="tanabe")
library(RiemSphere)
x = rvmf(50, c(1,rep(0,7)), 10)
## simply test
x = rvmf(50, c(1,rep(0,7)), 10)
mle.vmf(x, method="banerjee")
mle.vmf(x, method="song")
mle.vmf(x, method="sra")
mle.vmf(x, method="tanabe")
mle.vmf(x, method="uniroot")
## simply test
x = rvmf(50, c(1,rep(0,7)), 10)
mle.vmf(x, method="banerjee")
mle.vmf(x, method="song")
library(RiemSphere)
# 13. aux_ for von-Mises  -------------------------------------------------
#' @keywords internal
#' @noRd
aux_vmf_Apk <- function(p, kappa){
if (p > 100){
return(exp(Bessel::besselI.nuAsym(kappa, p/2, kmax=5, log=TRUE)- Bessel::besselI.nuAsym(kappa, (p/2)-1, kmax=5, log=TRUE)))
} else {
return(exp(Bessel::besselIasym(kappa, p/2, log = TRUE) - Bessel::besselIasym(kappa, (p/2)-1, log=TRUE)))
}
}
#' @keywords internal
#' @noRd
aux_vmf_dApk <- function(p, kappa){  # first derivative
Apk = aux_vmf_Apk(p, kappa)
return(1 - (Apk^2) - ((p-1)*Apk/kappa))
}
#' @keywords internal
#' @noRd
aux_vmf_d2Apk <- function(p, kappa){ # 2nd derivative
Apk = aux_vmf_Apk(p, kappa)
term1 = 2*(Apk^3)
term2 = 3*((p-1)/kappa)*(Apk^2)
term3 = ((p*(p-1) - 2*(kappa^2))/(kappa^2))*Apk
term4 = -(p-1)/kappa
return(term1+term2+term3+term4)
}
#' @keywords internal
#' @noRd
aux_vmf_Rbar <- function(dat){ # (n x p) convention
xbar = colMeans(dat)
return(sqrt(sum(xbar^2)))
}
######## SEVERAL KAPPA APPROXIMATION METHODS ##############################
# 1. 2005 Banerjee --------------------------------------------------------
#' @keywords internal
#' @noRd
vmf_2005banerjee <- function(x){
rbar <- aux_vmf_Rbar(x)
p    <- ncol(x)
term1 = rbar*(p-(rbar^2))
term2 = 1-(rbar^2)
return(term1/term2)
}
p = ncol(x)
kap0 = vmf_2005banerjee(x)
# iteration 1.
f0   = aux_vmf_Apk(p, kap0)
df0  = aux_vmf_dApk(p, kap0)
ddf0 = aux_vmf_d2Apk(p, kap0)
df0
ddf0
kap1
kap0
kap1 = kap0 - (2*f0*df0)/(2*(df0^2) - (f0*ddf0))
kap1
df0
ddf0
kap0
kap0 - (2*f0*df0)/(2*df0*df0 - f0*ddf0)
aux_vmf_Apk(p, kap0)
(aux_vmf_Apk(p, kap+0.01) - aux_vmf_Apk(p, kap-0.01))/0.02
(aux_vmf_Apk(p, kap0+0.01) - aux_vmf_Apk(p, kap0-0.01))/0.02
aux_vmf_dApk(p, kap0)
(aux_vmf_dApk(p, kap0+0.01) - aux_vmf_dApk(p, kap0-0.01))/0.02
library(RiemSphere)
## simply test
x = rvmf(50, c(1,rep(0,7)), 10)
mle.vmf(x, method="banerjee")
mle.vmf(x, method="song")
mle.vmf(x, method="sra")
mle.vmf(x, method="tanabe")
mle.vmf(x, method="uniroot")
## simply test
x = rvmf(50, c(1,rep(0,7)), 10)
mle.vmf(x, method="banerjee")
mle.vmf(x, method="song")
mle.vmf(x, method="sra")
mle.vmf(x, method="tanabe")
mle.vmf(x, method="uniroot")
library(RiemSphere)
## simply test
x = rvmf(50, c(1,rep(0,7)), 10)
mle.vmf(x, method="banerjee")
mle.vmf(x, method="song")
mle.vmf(x, method="sra")
mle.vmf(x, method="tanabe")
mle.vmf(x, method="uniroot")
## simply test
x = rvmf(50, c(1,rep(0,7)), 10)
mle.vmf(x, method="banerjee")
mle.vmf(x, method="song")
mle.vmf(x, method="sra")
mle.vmf(x, method="tanabe")
mle.vmf(x, method="uniroot")
## simply test
x = rvmf(50, c(1,rep(0,7)), 10)
mle.vmf(x, method="banerjee")
mle.vmf(x, method="song")
mle.vmf(x, method="sra")
mle.vmf(x, method="tanabe")
mle.vmf(x, method="uniroot")
## simply test
x = rvmf(50, c(1,rep(0,7)), 10)
mle.vmf(x, method="banerjee")
mle.vmf(x, method="song")
mle.vmf(x, method="sra")
mle.vmf(x, method="tanabe")
mle.vmf(x, method="uniroot")
## simply test
x = rvmf(50, c(1,rep(0,7)), 10)
mle.vmf(x, method="banerjee")
mle.vmf(x, method="song")
mle.vmf(x, method="sra")
mle.vmf(x, method="tanabe")
mle.vmf(x, method="uniroot")
library(RiemSphere)
log(gamma(10))
lgamma(10)
rm(list=ls())
library(RiemSphere)
library(RiemSphere)
x = rvmf(100, c(rep(0,7),1), kappa=1000)
mle.vmf(x, method="Banerjee")
mle.vmf(x, method="Sra")
mle.vmf(x, method="Song")
rm(list=ls())
library(RiemSphere)
help(BesselI)
help(besselI)
library(RiemSphere)
